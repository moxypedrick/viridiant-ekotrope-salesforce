//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class analysisJson2Apex {

	public class PvOffset {
		public Integer co2 {get;set;} 
		public Integer so2 {get;set;} 
		public Integer nox {get;set;} 

		public PvOffset(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'co2') {
							co2 = parser.getIntegerValue();
						} else if (text == 'so2') {
							so2 = parser.getIntegerValue();
						} else if (text == 'nox') {
							nox = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'PvOffset consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class pAnalysisJson2Apex {
		public String id {get;set;} 
		public String name {get;set;} 
		public Energy energy {get;set;} 
		public List<Compliance> compliance {get;set;} 
		public Integer hersScore {get;set;} 
		public Integer hersScoreNoPv {get;set;} 
		public String buildingType {get;set;} 
		public Emissions emissions {get;set;} 

		public pAnalysisJson2Apex(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'energy') {
							energy = new Energy(parser);
						} else if (text == 'compliance') {
							compliance = arrayOfCompliance(parser);
						} else if (text == 'hersScore') {
							hersScore = parser.getIntegerValue();
						} else if (text == 'hersScoreNoPv') {
							hersScoreNoPv = parser.getIntegerValue();
						} else if (text == 'buildingType') {
							buildingType = parser.getText();
						} else if (text == 'emissions') {
							emissions = new Emissions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'pAnalysisJson2Apex consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Energy {
		public Summary summary {get;set;} 
		public Breakdown breakdown {get;set;} 

		public Energy(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary(parser);
						} else if (text == 'breakdown') {
							breakdown = new Breakdown(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Energy consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
    public class Compliance {
		public String code {get;set;} 
		public String complianceStatus {get;set;} 
		public Integer targetHers {get;set;} 

		public Compliance(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'complianceStatus') {
							complianceStatus = parser.getText();
						} else if (text == 'targetHers') {
							targetHers = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Compliance consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    
	/*public class Compliance {

		public Compliance(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Compliance consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}*/
	
	public class Heating {
		public Double co2 {get;set;} 
		public Double so2 {get;set;} 
		public Double nox {get;set;} 

		public Heating(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'co2') {
							co2 = parser.getDoubleValue();
						} else if (text == 'so2') {
							so2 = parser.getDoubleValue();
						} else if (text == 'nox') {
							nox = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Heating consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ByFuel {
		public String fuel {get;set;} 
		public Integer heatingConsumption {get;set;} 
		public Integer coolingConsumption {get;set;} 
		public Integer waterHeatingConsumption {get;set;} 
		public Double lightingAndAppliancesConsumption {get;set;} 
		public Double cost {get;set;} 

		public ByFuel(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fuel') {
							fuel = parser.getText();
						} else if (text == 'heatingConsumption') {
							heatingConsumption = parser.getIntegerValue();
						} else if (text == 'coolingConsumption') {
							coolingConsumption = parser.getIntegerValue();
						} else if (text == 'waterHeatingConsumption') {
							waterHeatingConsumption = parser.getIntegerValue();
						} else if (text == 'lightingAndAppliancesConsumption') {
							lightingAndAppliancesConsumption = parser.getDoubleValue();
						} else if (text == 'cost') {
							cost = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'ByFuel consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Breakdown {
		public List<ByFuel> byFuel {get;set;} 
		public List<ByComponent> byComponent {get;set;} 

		public Breakdown(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'byFuel') {
							byFuel = arrayOfByFuel(parser);
						} else if (text == 'byComponent') {
							byComponent = arrayOfByComponent(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Breakdown consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary {
		public Double coolingConsumption {get;set;} 
		public Double heatingConsumption {get;set;} 
		public Double waterHeatingConsumption {get;set;} 
		public Double cost {get;set;} 
		public Integer solarGeneration {get;set;} 
		public Double winterElectricPowerPeak {get;set;} 
		public Double summerElectricPowerPeak {get;set;} 
		public Double lightingAndAppliancesConsumption {get;set;} 
		public Double coolingCost {get;set;} 
		public Double heatingCost {get;set;} 
		public Double waterHeatingCost {get;set;} 
		public Double lightingAndAppliancesCost {get;set;} 
		public Double serviceCharges {get;set;} 
		public Integer generationSavings {get;set;} 
		public Integer generationRevenue {get;set;} 

		public Summary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'coolingConsumption') {
							coolingConsumption = parser.getDoubleValue();
						} else if (text == 'heatingConsumption') {
							heatingConsumption = parser.getDoubleValue();
						} else if (text == 'waterHeatingConsumption') {
							waterHeatingConsumption = parser.getDoubleValue();
						} else if (text == 'cost') {
							cost = parser.getDoubleValue();
						} else if (text == 'solarGeneration') {
							solarGeneration = parser.getIntegerValue();
						} else if (text == 'winterElectricPowerPeak') {
							winterElectricPowerPeak = parser.getDoubleValue();
						} else if (text == 'summerElectricPowerPeak') {
							summerElectricPowerPeak = parser.getDoubleValue();
						} else if (text == 'lightingAndAppliancesConsumption') {
							lightingAndAppliancesConsumption = parser.getDoubleValue();
						} else if (text == 'coolingCost') {
							coolingCost = parser.getDoubleValue();
						} else if (text == 'heatingCost') {
							heatingCost = parser.getDoubleValue();
						} else if (text == 'waterHeatingCost') {
							waterHeatingCost = parser.getDoubleValue();
						} else if (text == 'lightingAndAppliancesCost') {
							lightingAndAppliancesCost = parser.getDoubleValue();
						} else if (text == 'serviceCharges') {
							serviceCharges = parser.getDoubleValue();
						} else if (text == 'generationSavings') {
							generationSavings = parser.getIntegerValue();
						} else if (text == 'generationRevenue') {
							generationRevenue = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Summary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ByEnergySink {
		public Heating heating {get;set;} 
		public Heating cooling {get;set;} 
		public Heating hotWater {get;set;} 
		public Heating lightsAndAppliances {get;set;} 
		public PvOffset pvOffset {get;set;} 

		public ByEnergySink(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'heating') {
							heating = new Heating(parser);
						} else if (text == 'cooling') {
							cooling = new Heating(parser);
						} else if (text == 'hotWater') {
							hotWater = new Heating(parser);
						} else if (text == 'lightsAndAppliances') {
							lightsAndAppliances = new Heating(parser);
						} else if (text == 'pvOffset') {
							pvOffset = new PvOffset(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ByEnergySink consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ByComponent {
		public String category {get;set;} 
		public Integer heatingLoad {get;set;} 
		public Integer coolingLoad {get;set;} 

		public ByComponent(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'category') {
							category = parser.getText();
						} else if (text == 'heatingLoad') {
							heatingLoad = parser.getIntegerValue();
						} else if (text == 'coolingLoad') {
							coolingLoad = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'ByComponent consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_Z {
		public Double totalCo2 {get;set;} 
		public Double totalSo2 {get;set;} 
		public Double totalNox {get;set;} 

		public Summary_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'totalCo2') {
							totalCo2 = parser.getDoubleValue();
						} else if (text == 'totalSo2') {
							totalSo2 = parser.getDoubleValue();
						} else if (text == 'totalNox') {
							totalNox = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Summary_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Emissions {
		public Summary_Z summary {get;set;} 
		public ByEnergySink byEnergySink {get;set;} 

		public Emissions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_Z(parser);
						} else if (text == 'byEnergySink') {
							byEnergySink = new ByEnergySink(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Emissions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public static pAnalysisJson2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new pAnalysisJson2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

    private static List<ByFuel> arrayOfByFuel(System.JSONParser p) {
        List<ByFuel> res = new List<ByFuel>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ByFuel(p));
        }
        return res;
    }

    private static List<Compliance> arrayOfCompliance(System.JSONParser p) {
        List<Compliance> res = new List<Compliance>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Compliance(p));
        }
        return res;
    }

    private static List<ByComponent> arrayOfByComponent(System.JSONParser p) {
        List<ByComponent> res = new List<ByComponent>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ByComponent(p));
        }
        return res;
    }

}