//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class housePlanJSON2Apex {

	public class DominantMechanicalVentilationType {
		public String ventilationType {get;set;} 
		public Integer operationalHoursPerDay {get;set;} 
		public Integer watts {get;set;} 
		public Integer ventilationRate {get;set;} 
		public Integer recoveryEfficiency {get;set;} 

		public DominantMechanicalVentilationType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ventilationType') {
							ventilationType = parser.getText();
						} else if (text == 'operationalHoursPerDay') {
							operationalHoursPerDay = parser.getIntegerValue();
						} else if (text == 'watts') {
							watts = parser.getIntegerValue();
						} else if (text == 'ventilationRate') {
							ventilationRate = parser.getIntegerValue();
						} else if (text == 'recoveryEfficiency') {
							recoveryEfficiency = parser.getIntegerValue();
						} else {
							////system.debug(LoggingLevel.WARN, 'DominantMechanicalVentilationType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Type_Z {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Double uFactor {get;set;} 
		public Boolean hasAssemblyDetails {get;set;} 
		public Boolean isVerified {get;set;} 
		public Integer rFactor {get;set;} 
		public Integer distanceInsulationTopToTop {get;set;} 
		public Integer distanceInsulationBottomToTop {get;set;} 

		public Type_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else if (text == 'hasAssemblyDetails') {
							hasAssemblyDetails = parser.getBooleanValue();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'rFactor') {
							rFactor = parser.getIntegerValue();
						} else if (text == 'distanceInsulationTopToTop') {
							distanceInsulationTopToTop = parser.getIntegerValue();
						} else if (text == 'distanceInsulationBottomToTop') {
							distanceInsulationBottomToTop = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Type_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ClothesDryer {
		public String fuel {get;set;} 
		public Double combinedEfficiencyFactor {get;set;} 
		public String utilizationFactor {get;set;} 

		public ClothesDryer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fuel') {
							fuel = parser.getText();
						} else if (text == 'combinedEfficiencyFactor') {
							combinedEfficiencyFactor = parser.getDoubleValue();
						} else if (text == 'utilizationFactor') {
							utilizationFactor = parser.getText();
						} else {
							//system.debug(LoggingLevel.WARN, 'ClothesDryer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantFoundationWallType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Double uFactor {get;set;} 
		public Boolean hasAssemblyDetails {get;set;} 
		public AssemblyDetails_Z assemblyDetails {get;set;} 
		public Boolean isVerified {get;set;} 
		public Double rFactor {get;set;} 
		public Integer distanceInsulationTopToTop {get;set;} 
		public Integer distanceInsulationBottomToTop {get;set;} 

		public DominantFoundationWallType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else if (text == 'hasAssemblyDetails') {
							hasAssemblyDetails = parser.getBooleanValue();
						} else if (text == 'assemblyDetails') {
							assemblyDetails = new AssemblyDetails_Z(parser);
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'rFactor') {
							rFactor = parser.getDoubleValue();
						} else if (text == 'distanceInsulationTopToTop') {
							distanceInsulationTopToTop = parser.getIntegerValue();
						} else if (text == 'distanceInsulationBottomToTop') {
							distanceInsulationBottomToTop = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantFoundationWallType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
    
	public class DominantFramedFloorType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Double uFactor {get;set;} 
		public Boolean hasAssemblyDetails {get;set;} 
		public AssemblyDetails_Z assemblyDetails {get;set;} 
		public Boolean isVerified {get;set;} 
		public Double rFactor {get;set;} 
		public Integer distanceInsulationTopToTop {get;set;} 
		public Integer distanceInsulationBottomToTop {get;set;} 

		public DominantFramedFloorType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else if (text == 'hasAssemblyDetails') {
							hasAssemblyDetails = parser.getBooleanValue();
						} else if (text == 'assemblyDetails') {
							assemblyDetails = new AssemblyDetails_Z(parser);
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantFoundationWallType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Interior {
		public Double summer {get;set;} 
		public Double winter {get;set;} 

		public Interior(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summer') {
							summer = parser.getDoubleValue();
						} else if (text == 'winter') {
							winter = parser.getDoubleValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Interior consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PercentEfficient {
		public Integer interior {get;set;} 
		public Integer exterior {get;set;} 
		public Integer garage {get;set;} 

		public PercentEfficient(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'interior') {
							interior = parser.getIntegerValue();
						} else if (text == 'exterior') {
							exterior = parser.getIntegerValue();
						} else if (text == 'garage') {
							garage = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'PercentEfficient consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Heating_Z {
		public String efficiencyType {get;set;} 
		public Integer percentLoad {get;set;} 
		public Double efficiency {get;set;} 

		public Heating_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiencyType') {
							efficiencyType = parser.getText();
						} else if (text == 'percentLoad') {
							percentLoad = parser.getIntegerValue();
						} else if (text == 'efficiency') {
							efficiency = parser.getDoubleValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Heating_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ClothesWasher {
		public Integer labeledEnergyRating {get;set;} 
		public Double electricRate {get;set;} 
		public Double gasRate {get;set;} 
		public Integer annualGasCost {get;set;} 
		public Double capacity {get;set;} 
		public Double integratedModifiedEnergyFactor {get;set;} 

		public ClothesWasher(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'labeledEnergyRating') {
							labeledEnergyRating = parser.getIntegerValue();
						} else if (text == 'electricRate') {
							electricRate = parser.getDoubleValue();
						} else if (text == 'gasRate') {
							gasRate = parser.getDoubleValue();
						} else if (text == 'annualGasCost') {
							annualGasCost = parser.getIntegerValue();
						} else if (text == 'capacity') {
							capacity = parser.getDoubleValue();
						} else if (text == 'integratedModifiedEnergyFactor') {
							integratedModifiedEnergyFactor = parser.getDoubleValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'ClothesWasher consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantCeilingType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Double uFactor {get;set;} 
		public Boolean hasAssemblyDetails {get;set;} 
		public AssemblyDetails assemblyDetails {get;set;} 
		public Boolean isVerified {get;set;} 
		public Boolean radiantBarrier {get;set;} 

		public DominantCeilingType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else if (text == 'hasAssemblyDetails') {
							hasAssemblyDetails = parser.getBooleanValue();
						} else if (text == 'assemblyDetails') {
							assemblyDetails = new AssemblyDetails(parser);
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'radiantBarrier') {
							radiantBarrier = parser.getBooleanValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantCeilingType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantWindowType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Double uFactor {get;set;} 
		public Double SHGC {get;set;} 
		public Boolean isVerified {get;set;} 

		public DominantWindowType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else if (text == 'SHGC') {
							SHGC = parser.getDoubleValue();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantWindowType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ShadingFactors {
		public Interior interior {get;set;} 
		public Adjacent adjacent {get;set;} 

		public ShadingFactors(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'interior') {
							interior = new Interior(parser);
						} else if (text == 'adjacent') {
							adjacent = new Adjacent(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'ShadingFactors consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Doors {
		public String name {get;set;} 
		public Integer installedWallIndex {get;set;} 
		public Integer surfaceArea {get;set;} 
		public DominantDoorType type_Z {get;set;} // in json: type

		public Doors(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'installedWallIndex') {
							installedWallIndex = parser.getIntegerValue();
						} else if (text == 'surfaceArea') {
							surfaceArea = parser.getIntegerValue();
						} else if (text == 'type') {
							type_Z = new DominantDoorType(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Doors consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Mechanicals {
		public Summary_Z summary {get;set;} 
		public List<Equipment> equipment {get;set;} 
		public List<mechanicalEquipment> mechanicalEquipment {get;set;} 
		public List<DominantMechanicalVentilationType> mechanicalVentilation {get;set;} 
		public List<DominantDistributionSystem> distributionSystems {get;set;} 
		public List<Thermostats> thermostats {get;set;} 

		public Mechanicals(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_Z(parser);
						} else if (text == 'equipment') {
							equipment = arrayOfEquipment(parser);
						} else if (text == 'mechanicalEquipment') {
							mechanicalEquipment = arrayOfMechanicalEquipment(parser);
						} else if (text == 'mechanicalVentilation') {
							mechanicalVentilation = arrayOfDominantMechanicalVentilationType(parser);
						} else if (text == 'distributionSystems') {
							distributionSystems = arrayOfDominantDistributionSystem(parser);
						} else if (text == 'thermostats') {
							thermostats = arrayOfThermostats(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Mechanicals consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantDistributionSystem {
		public String systemType {get;set;} 
		public String fieldTestStatus {get;set;} 
		public Boolean isTested {get;set;} 
		public TestedDetails testedDetails {get;set;} 
		public Integer heatingEquipmentIndex {get;set;} 
		public Integer coolingEquipmentIndex {get;set;} 

		public DominantDistributionSystem(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'systemType') {
							systemType = parser.getText();
						} else if (text == 'fieldTestStatus') {
							fieldTestStatus = parser.getText();
						} else if (text == 'isTested') {
							isTested = parser.getBooleanValue();
						} else if (text == 'testedDetails') {
							testedDetails = new TestedDetails(parser);
						} else if (text == 'heatingEquipmentIndex') {
							heatingEquipmentIndex = parser.getIntegerValue();
						} else if (text == 'coolingEquipmentIndex') {
							coolingEquipmentIndex = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantDistributionSystem consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Slabs {
		public String name {get;set;} 
		public String encloses {get;set;} 
		public Integer surfaceArea {get;set;} 
		public Integer exteriorPerimeter {get;set;} 
		public Integer exposedMasonryArea {get;set;} 
		public String grade {get;set;} 
		public DominantSlabType type_Z {get;set;} // in json: type

		public Slabs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'encloses') {
							encloses = parser.getText();
						} else if (text == 'surfaceArea') {
							surfaceArea = parser.getIntegerValue();
						} else if (text == 'exteriorPerimeter') {
							exteriorPerimeter = parser.getIntegerValue();
						} else if (text == 'exposedMasonryArea') {
							exposedMasonryArea = parser.getIntegerValue();
						} else if (text == 'grade') {
							grade = parser.getText();
						} else if (text == 'type') {
							type_Z = new DominantSlabType(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Slabs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MechanicalEquipment {
		public String name {get;set;} 
		public Integer heatingPercentLoad {get;set;} 
		public Integer coolingPercentLoad {get;set;} 
		public Integer hotWaterPercentLoad {get;set;} 
		public String location {get;set;} 
		public DominantHeatingEquipmentType type_Z {get;set;} // in json: type

		public MechanicalEquipment(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'heatingPercentLoad') {
							heatingPercentLoad = parser.getIntegerValue();
						} else if (text == 'coolingPercentLoad') {
							coolingPercentLoad = parser.getIntegerValue();
						} else if (text == 'hotWaterPercentLoad') {
							hotWaterPercentLoad = parser.getIntegerValue();
						} else if (text == 'location') {
							location = parser.getText();
						} else if (text == 'type') {
							type_Z = new DominantHeatingEquipmentType(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'MechanicalEquipment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Cooling {
		public Integer efficiency {get;set;} 
		public String efficiencyType {get;set;} 
		public Integer capacity {get;set;} 

		public Cooling(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiency') {
							efficiency = parser.getIntegerValue();
						} else if (text == 'efficiencyType') {
							efficiencyType = parser.getText();
						} else if (text == 'capacity') {
							capacity = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Cooling consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantSlabType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Boolean isVerified {get;set;} 
		public Boolean slabCompletelyInsulated {get;set;} 
		public Integer perimeterRValue {get;set;} 
		public Integer underSlabRValue {get;set;} 
		public Integer underslabInsulationWidth {get;set;} 
		public Integer perimeterInsulationDepth {get;set;} 

		public DominantSlabType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'slabCompletelyInsulated') {
							slabCompletelyInsulated = parser.getBooleanValue();
						} else if (text == 'perimeterRValue') {
							perimeterRValue = parser.getIntegerValue();
						} else if (text == 'underSlabRValue') {
							underSlabRValue = parser.getIntegerValue();
						} else if (text == 'underslabInsulationWidth') {
							underslabInsulationWidth = parser.getIntegerValue();
						} else if (text == 'perimeterInsulationDepth') {
							perimeterInsulationDepth = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantSlabType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ducts {
		public String location {get;set;} 
		public Integer percentSupplyArea {get;set;} 
		public Integer percentReturnArea {get;set;} 
		public Integer supplyR {get;set;} 
		public Integer returnR {get;set;} 

		public Ducts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'location') {
							location = parser.getText();
						} else if (text == 'percentSupplyArea') {
							percentSupplyArea = parser.getIntegerValue();
						} else if (text == 'percentReturnArea') {
							percentReturnArea = parser.getIntegerValue();
						} else if (text == 'supplyR') {
							supplyR = parser.getIntegerValue();
						} else if (text == 'returnR') {
							returnR = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Ducts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RangeOven {
		public String fuel {get;set;} 

		public RangeOven(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fuel') {
							fuel = parser.getText();
						} else {
							//system.debug(LoggingLevel.WARN, 'RangeOven consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantHeatingEquipmentType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public String fuel {get;set;} 
		public String equipmentType {get;set;} 
		public String motorType {get;set;} 
		public Boolean isVerified {get;set;} 
		public String ahriReferenceNumber {get;set;} 
		public Boolean usingDefaultElectricAuxiliaryEnergy {get;set;} 
		public Integer electricAuxiliaryEnergy {get;set;} 
		public Heating heating {get;set;} 
		public Cooling cooling {get;set;} 
		public HotWater hotWater {get;set;} 

		public DominantHeatingEquipmentType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'fuel') {
							fuel = parser.getText();
						} else if (text == 'equipmentType') {
							equipmentType = parser.getText();
						} else if (text == 'motorType') {
							motorType = parser.getText();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'ahriReferenceNumber') {
							ahriReferenceNumber = parser.getText();
						} else if (text == 'usingDefaultElectricAuxiliaryEnergy') {
							usingDefaultElectricAuxiliaryEnergy = parser.getBooleanValue();
						} else if (text == 'electricAuxiliaryEnergy') {
							electricAuxiliaryEnergy = parser.getIntegerValue();
						} else if (text == 'heating') {
							heating = new Heating(parser);
						} else if (text == 'cooling') {
							cooling = new Cooling(parser);
						} else if (text == 'hotWater') {
							hotWater = new HotWater(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantHeatingEquipmentType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TestedDetails {
		public Integer sqFtServed {get;set;} 
		public Integer numberOfReturnGrilles {get;set;} 
		public Double supplyDuctSurfaceArea {get;set;} 
		public Double returnDuctSurfaceArea {get;set;} 
		public Boolean isLeakageToOutsideTested {get;set;} 
		public Integer leakageToOutside {get;set;} 
		public Integer totalLeakage {get;set;} 
		public String totalLeakageTestCondition {get;set;} 
		public List<Ducts> ducts {get;set;} 

		public TestedDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sqFtServed') {
							sqFtServed = parser.getIntegerValue();
						} else if (text == 'numberOfReturnGrilles') {
							numberOfReturnGrilles = parser.getIntegerValue();
						} else if (text == 'supplyDuctSurfaceArea') {
							supplyDuctSurfaceArea = parser.getDoubleValue();
						} else if (text == 'returnDuctSurfaceArea') {
							returnDuctSurfaceArea = parser.getDoubleValue();
						} else if (text == 'isLeakageToOutsideTested') {
							isLeakageToOutsideTested = parser.getBooleanValue();
						} else if (text == 'leakageToOutside') {
							leakageToOutside = parser.getIntegerValue();
						} else if (text == 'totalLeakage') {
							totalLeakage = parser.getIntegerValue();
						} else if (text == 'totalLeakageTestCondition') {
							totalLeakageTestCondition = parser.getText();
						} else if (text == 'ducts') {
							ducts = arrayOfDucts(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'TestedDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Details {
		public Integer bedrooms {get;set;} 
		public String residenceType {get;set;} 
		public Integer numberOfFloorsOnOrAboveGrade {get;set;} 
		public Boolean programmableThermostat {get;set;} 
		public String buildingType {get;set;} 
		public Integer unitsInBuilding {get;set;} 
		public Boolean hasElectricVehicleReadySpace {get;set;} 

		public Details(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'bedrooms') {
							bedrooms = parser.getIntegerValue();
						} else if (text == 'residenceType') {
							residenceType = parser.getText();
						} else if (text == 'numberOfFloorsOnOrAboveGrade') {
							numberOfFloorsOnOrAboveGrade = parser.getIntegerValue();
						} else if (text == 'programmableThermostat') {
							programmableThermostat = parser.getBooleanValue();
						} else if (text == 'buildingType') {
							buildingType = parser.getText();
						} else if (text == 'unitsInBuilding') {
							unitsInBuilding = parser.getIntegerValue();
						} else if (text == 'hasElectricVehicleReadySpace') {
							hasElectricVehicleReadySpace = parser.getBooleanValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Details consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AssemblyDetails_Z {
		public Double cavityR {get;set;} 
		public List<String> cavityInsulationGrade {get;set;} 
		public List<String> cavityInsulationMaterial {get;set;} 
		public Integer continuousR {get;set;} 
		public List<Integer> framingSpacing {get;set;} 
		public List<Double> framingDepth {get;set;} 
		public List<Double> framingFraction {get;set;} 

		public AssemblyDetails_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'cavityR') {
							cavityR = parser.getDoubleValue();
						} else if (text == 'cavityInsulationGrade') {
							cavityInsulationGrade = arrayOfString(parser);
						} else if (text == 'cavityInsulationMaterial') {
							cavityInsulationMaterial = arrayOfString(parser);
						} else if (text == 'continuousR') {
							continuousR = parser.getIntegerValue();
						} else if (text == 'framingSpacing') {
							framingSpacing = arrayOfInteger(parser);
						} else if (text == 'framingDepth') {
							framingDepth = arrayOfDouble(parser);
						} else if (text == 'framingFraction') {
							framingFraction = arrayOfDouble(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'AssemblyDetails_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Infiltration {
		public String fieldTestStatus {get;set;} 
		public Integer cfm50 {get;set;} 
		public Double ach50 {get;set;} 
		public Double effectiveLeakageArea {get;set;} 
		public Double specificLeakageArea {get;set;} 
		public Double heatingNaturalACH {get;set;} 
		public Double coolingNaturalACH {get;set;} 

		public Infiltration(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fieldTestStatus') {
							fieldTestStatus = parser.getText();
						} else if (text == 'cfm50') {
							cfm50 = parser.getIntegerValue();
						} else if (text == 'ach50') {
							ach50 = parser.getDoubleValue();
						} else if (text == 'effectiveLeakageArea') {
							effectiveLeakageArea = parser.getDoubleValue();
						} else if (text == 'specificLeakageArea') {
							specificLeakageArea = parser.getDoubleValue();
						} else if (text == 'heatingNaturalACH') {
							heatingNaturalACH = parser.getDoubleValue();
						} else if (text == 'coolingNaturalACH') {
							coolingNaturalACH = parser.getDoubleValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Infiltration consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FoundationWalls {
		public String name {get;set;} 
		public String encloses {get;set;} 
		public String betweenInteriorAnd {get;set;} 
		public Integer heightAboveGrade {get;set;} 
		public Integer depthBelowGrade {get;set;} 
		public Integer perimeter {get;set;} 
		public Type_Z type_Z {get;set;} // in json: type

		public FoundationWalls(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'encloses') {
							encloses = parser.getText();
						} else if (text == 'betweenInteriorAnd') {
							betweenInteriorAnd = parser.getText();
						} else if (text == 'heightAboveGrade') {
							heightAboveGrade = parser.getIntegerValue();
						} else if (text == 'depthBelowGrade') {
							depthBelowGrade = parser.getIntegerValue();
						} else if (text == 'perimeter') {
							perimeter = parser.getIntegerValue();
						} else if (text == 'type') {
							type_Z = new Type_Z(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'FoundationWalls consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Walls {
		public String name {get;set;} 
		public String surfaceColor {get;set;} 
		public String betweenInteriorAnd {get;set;} 
		public Integer surfaceArea {get;set;} 
		public DominantWallType type_Z {get;set;} // in json: type

		public Walls(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'surfaceColor') {
							surfaceColor = parser.getText();
						} else if (text == 'betweenInteriorAnd') {
							betweenInteriorAnd = parser.getText();
						} else if (text == 'surfaceArea') {
							surfaceArea = parser.getIntegerValue();
						} else if (text == 'type') {
							type_Z = new DominantWallType(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Walls consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FramedFloors {

		public FramedFloors(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							//system.debug(LoggingLevel.WARN, 'FramedFloors consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantWallType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Double uFactor {get;set;} 
		public Boolean hasAssemblyDetails {get;set;} 
		public AssemblyDetails assemblyDetails {get;set;} 
		public Boolean isVerified {get;set;} 

		public DominantWallType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else if (text == 'hasAssemblyDetails') {
							hasAssemblyDetails = parser.getBooleanValue();
						} else if (text == 'assemblyDetails') {
							assemblyDetails = new AssemblyDetails(parser);
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantWallType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String id {get;set;} 
	public String name {get;set;} 
	public Lighting lighting {get;set;} 
	public Appliances appliances {get;set;} 
	public ThermalEnvelope thermalEnvelope {get;set;} 
	public Mechanicals mechanicals {get;set;} 
	public OnsiteGenerations onsiteGenerations {get;set;} 
	public WaterSystem waterSystem {get;set;} 
	public Details details {get;set;} 

	public housePlanJSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'id') {
						id = parser.getText();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'lighting') {
						lighting = new Lighting(parser);
					} else if (text == 'appliances') {
						appliances = new Appliances(parser);
					} else if (text == 'thermalEnvelope') {
						thermalEnvelope = new ThermalEnvelope(parser);
					} else if (text == 'mechanicals') {
						mechanicals = new Mechanicals(parser);
					} else if (text == 'onsiteGenerations') {
						onsiteGenerations = new OnsiteGenerations(parser);
					} else if (text == 'waterSystem') {
						waterSystem = new WaterSystem(parser);
					} else if (text == 'details') {
						details = new Details(parser);
					} else {
						//system.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Windows {
		public String name {get;set;} 
		public String orientation {get;set;} 
		public Integer installedWallIndex {get;set;} 
		public Integer surfaceArea {get;set;} 
		public DominantWindowType type_Z {get;set;} // in json: type
		public Double overhangDepth {get;set;} 
		public Integer distanceOverhangToTop {get;set;} 
		public Integer distanceOverhangToBottom {get;set;} 
		public ShadingFactors shadingFactors {get;set;} 
		public Integer installedFoundationWallIndex {get;set;} 

		public Windows(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'orientation') {
							orientation = parser.getText();
						} else if (text == 'installedWallIndex') {
							installedWallIndex = parser.getIntegerValue();
						} else if (text == 'surfaceArea') {
							surfaceArea = parser.getIntegerValue();
						} else if (text == 'type') {
							type_Z = new DominantWindowType(parser);
						} else if (text == 'overhangDepth') {
							overhangDepth = parser.getDoubleValue();
						} else if (text == 'distanceOverhangToTop') {
							distanceOverhangToTop = parser.getIntegerValue();
						} else if (text == 'distanceOverhangToBottom') {
							distanceOverhangToBottom = parser.getIntegerValue();
						} else if (text == 'shadingFactors') {
							shadingFactors = new ShadingFactors(parser);
						} else if (text == 'installedFoundationWallIndex') {
							installedFoundationWallIndex = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Windows consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantCoolingEquipmentType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public String fuel {get;set;} 
		public String equipmentType {get;set;} 
		public String motorType {get;set;} 
		public Boolean isVerified {get;set;} 
		public String ahriReferenceNumber {get;set;} 
		public Cooling heating {get;set;} 
		public Cooling_Z cooling {get;set;} 
		public HotWater hotWater {get;set;} 

		public DominantCoolingEquipmentType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'fuel') {
							fuel = parser.getText();
						} else if (text == 'equipmentType') {
							equipmentType = parser.getText();
						} else if (text == 'motorType') {
							motorType = parser.getText();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'ahriReferenceNumber') {
							ahriReferenceNumber = parser.getText();
						} else if (text == 'heating') {
							heating = new Cooling(parser);
						} else if (text == 'cooling') {
							cooling = new Cooling_Z(parser);
						} else if (text == 'hotWater') {
							hotWater = new HotWater(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantCoolingEquipmentType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_Z {
		public Integer ductSystemCount {get;set;} 
		public Integer ductLeakageTotal {get;set;} 
		public Integer ductLeakageToOutside {get;set;} 
		public Integer mechanicalVentilationRate {get;set;} 
		public DominantHeatingEquipmentType dominantHeatingEquipmentType {get;set;} 
		public DominantCoolingEquipmentType dominantCoolingEquipmentType {get;set;} 
		public DominantHotWaterEquipment dominantHotWaterEquipment {get;set;} 
		public DominantMechanicalVentilationType dominantMechanicalVentilationType {get;set;} 
		public DominantDistributionSystem dominantDistributionSystem {get;set;} 

		public Summary_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ductSystemCount') {
							ductSystemCount = parser.getIntegerValue();
						} else if (text == 'ductLeakageTotal') {
							ductLeakageTotal = parser.getIntegerValue();
						} else if (text == 'ductLeakageToOutside') {
							ductLeakageToOutside = parser.getIntegerValue();
						} else if (text == 'mechanicalVentilationRate') {
							mechanicalVentilationRate = parser.getIntegerValue();
						} else if (text == 'dominantHeatingEquipmentType') {
							dominantHeatingEquipmentType = new DominantHeatingEquipmentType(parser);
						} else if (text == 'dominantCoolingEquipmentType') {
							dominantCoolingEquipmentType = new DominantCoolingEquipmentType(parser);
						} else if (text == 'dominantHotWaterEquipment') {
							dominantHotWaterEquipment = new DominantHotWaterEquipment(parser);
						} else if (text == 'dominantMechanicalVentilationType') {
							dominantMechanicalVentilationType = new DominantMechanicalVentilationType(parser);
						} else if (text == 'dominantDistributionSystem') {
							dominantDistributionSystem = new DominantDistributionSystem(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Summary_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary_Y {
		public Boolean hasSolarGeneration {get;set;} 

		public Summary_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'hasSolarGeneration') {
							hasSolarGeneration = parser.getBooleanValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Summary_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DominantHotWaterEquipment {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public String fuel {get;set;} 
		public String equipmentType {get;set;} 
		public String motorType {get;set;} 
		public Boolean isVerified {get;set;} 
		public String ahriReferenceNumber {get;set;} 
		public Cooling heating {get;set;} 
		public Cooling cooling {get;set;} 
		public HotWater_Z hotWater {get;set;} 

		public DominantHotWaterEquipment(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'fuel') {
							fuel = parser.getText();
						} else if (text == 'equipmentType') {
							equipmentType = parser.getText();
						} else if (text == 'motorType') {
							motorType = parser.getText();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'ahriReferenceNumber') {
							ahriReferenceNumber = parser.getText();
						} else if (text == 'heating') {
							heating = new Cooling(parser);
						} else if (text == 'cooling') {
							cooling = new Cooling(parser);
						} else if (text == 'hotWater') {
							hotWater = new HotWater_Z(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantHotWaterEquipment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Cooling_Z {
		public Integer efficiency {get;set;} 
		public String efficiencyType {get;set;} 
		public Double capacity {get;set;} 

		public Cooling_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiency') {
							efficiency = parser.getIntegerValue();
						} else if (text == 'efficiencyType') {
							efficiencyType = parser.getText();
						} else if (text == 'capacity') {
							capacity = parser.getDoubleValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Cooling_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
		public class ThermalEnvelope {
		public Summary summary {get;set;} 
		public Infiltration infiltration {get;set;} 
		public String foundationType {get;set;} 
		public List<Slabs> slabs {get;set;} 
		public List<FramedFloors> framedFloors {get;set;} 
		public List<FoundationWalls> foundationWalls {get;set;} 
		public List<Walls> walls {get;set;} 
		//public List<CavityInsulationGrade> rimJoists {get;set;} 
		//public List<Ceilings> ceilings {get;set;} 
		public List<Windows> windows {get;set;} 
		//public List<CavityInsulationGrade> skylights {get;set;} 
		public List<Doors> doors {get;set;} 

		public ThermalEnvelope(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary(parser);
						}  /*else if (text == 'infiltration') {
							infiltration = new Infiltration(parser);
						} else if (text == 'foundationType') {
							foundationType = parser.getText();
						} else if (text == 'slabs') {
							slabs = arrayOfSlabs(parser);
						} else if (text == 'framedFloors') {
							framedFloors = arrayOfFramedFloors(parser);
						} else if (text == 'foundationWalls') {
							foundationWalls = arrayOfFoundationWalls(parser);
						} else if (text == 'walls') {
							walls = arrayOfWalls(parser);
						} else if (text == 'rimJoists') {
							rimJoists = arrayOfCavityInsulationGrade(parser);
						} else if (text == 'ceilings') {
							ceilings = arrayOfCeilings(parser);
						} else if (text == 'windows') {
							windows = arrayOfWindows(parser);
						} else if (text == 'skylights') {
							skylights = arrayOfCavityInsulationGrade(parser);
						} else if (text == 'doors') {
							doors = arrayOfDoors(parser);
						}*/ else {
							//system.debug(LoggingLevel.WARN, 'ThermalEnvelope consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public class DominantRimJoistType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Boolean isVerified {get;set;} 
		public Double uFactor {get;set;} 
		public Integer rFactor {get;set;} 

		public DominantRimJoistType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else if (text == 'rFactor') {
							rFactor = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantRimJoistType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Lighting {
		public PercentEfficient percentEfficient {get;set;} 
		public PercentLED percentLED {get;set;} 

		public Lighting(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'percentEfficient') {
							percentEfficient = new PercentEfficient(parser);
						} else if (text == 'percentLED') {
							percentLED = new PercentLED(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Lighting consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Cooling_Y {
		public String efficiencyType {get;set;} 
		public Integer percentLoad {get;set;} 
		public Integer efficiency {get;set;} 

		public Cooling_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiencyType') {
							efficiencyType = parser.getText();
						} else if (text == 'percentLoad') {
							percentLoad = parser.getIntegerValue();
						} else if (text == 'efficiency') {
							efficiency = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Cooling_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Adjacent {
		public Integer summer {get;set;} 
		public Integer winter {get;set;} 

		public Adjacent(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summer') {
							summer = parser.getIntegerValue();
						} else if (text == 'winter') {
							winter = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Adjacent consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ceilings {
		public String name {get;set;} 
		public String surfaceColor {get;set;} 
		public String betweenInteriorAnd {get;set;} 
		public Integer surfaceArea {get;set;} 
		public Integer roofDeckArea {get;set;} 
		public Boolean clayConcreteRoofTiles {get;set;} 
		public DominantCeilingType type_Z {get;set;} // in json: type

		public Ceilings(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'surfaceColor') {
							surfaceColor = parser.getText();
						} else if (text == 'betweenInteriorAnd') {
							betweenInteriorAnd = parser.getText();
						} else if (text == 'surfaceArea') {
							surfaceArea = parser.getIntegerValue();
						} else if (text == 'roofDeckArea') {
							roofDeckArea = parser.getIntegerValue();
						} else if (text == 'clayConcreteRoofTiles') {
							clayConcreteRoofTiles = parser.getBooleanValue();
						} else if (text == 'type') {
							type_Z = new DominantCeilingType(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Ceilings consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RimJoists {
		public String name {get;set;} 
		public String betweenInteriorAnd {get;set;} 
		public Integer surfaceArea {get;set;} 
		public DominantRimJoistType type_Z {get;set;} // in json: type

		public RimJoists(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'betweenInteriorAnd') {
							betweenInteriorAnd = parser.getText();
						} else if (text == 'surfaceArea') {
							surfaceArea = parser.getIntegerValue();
						} else if (text == 'type') {
							type_Z = new DominantRimJoistType(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'RimJoists consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OnsiteGenerations {
		public Summary_Y summary {get;set;} 
		public List<FramedFloors> solarGenerationSystems {get;set;} 

		public OnsiteGenerations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary_Y(parser);
						} else if (text == 'solarGenerationSystems') {
							solarGenerationSystems = arrayOfFramedFloors(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'OnsiteGenerations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class WaterSystem {
		public String fixtureEffectiveness {get;set;} 
		public Boolean usingEstimatedHotWaterPipeLength {get;set;} 
		public Integer hotWaterPipeLength {get;set;} 
		public Boolean allHotWaterPipesInsulatedToAtLeastR3 {get;set;} 
        public recirculationSystem recircSystem {get;set;}

		public WaterSystem(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fixtureEffectiveness') {
							fixtureEffectiveness = parser.getText();
						} else if (text == 'usingEstimatedHotWaterPipeLength') {
							usingEstimatedHotWaterPipeLength = parser.getBooleanValue();
						} else if (text == 'hotWaterPipeLength') {
							hotWaterPipeLength = parser.getIntegerValue();
						} else if (text == 'allHotWaterPipesInsulatedToAtLeastR3') {
							allHotWaterPipesInsulatedToAtLeastR3 = parser.getBooleanValue();
						} else if (text == 'recirculationSystem') {
							recircSystem = new recirculationSystem(parser);
						}else {
							//system.debug(LoggingLevel.WARN, 'WaterSystem consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    
    public class recirculationSystem{
        public String systemControl {get;set;} 
		     
        public recirculationSystem(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'systemControl') {
							systemControl = parser.getText();
						} else {
							//system.debug(LoggingLevel.WARN, 'recirc pump consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
        
    }
	
	public class DominantDoorType {
		public String id {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Boolean isVerified {get;set;} 
		public Double uFactor {get;set;} 

		public DominantDoorType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'isVerified') {
							isVerified = parser.getBooleanValue();
						} else if (text == 'uFactor') {
							uFactor = parser.getDoubleValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'DominantDoorType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Appliances {
		public String dishwasherEfficiencyType {get;set;} 
		public Integer dishwasherEfficiency {get;set;} 
		public Integer dishwasherPlaceSettings {get;set;} 
		public Integer refrigeratorConsumption {get;set;} 
		public ClothesDryer clothesDryer {get;set;} 
		public ClothesWasher clothesWasher {get;set;} 
		public RangeOven rangeOven {get;set;} 

		public Appliances(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dishwasherEfficiencyType') {
							dishwasherEfficiencyType = parser.getText();
						} else if (text == 'dishwasherEfficiency') {
							dishwasherEfficiency = parser.getIntegerValue();
						} else if (text == 'dishwasherPlaceSettings') {
							dishwasherPlaceSettings = parser.getIntegerValue();
						} else if (text == 'refrigeratorConsumption') {
							refrigeratorConsumption = parser.getIntegerValue();
						} else if (text == 'clothesDryer') {
							clothesDryer = new ClothesDryer(parser);
						} else if (text == 'clothesWasher') {
							clothesWasher = new ClothesWasher(parser);
						} else if (text == 'rangeOven') {
							rangeOven = new RangeOven(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Appliances consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Equipment {
		public String equipmentType {get;set;} 
		public Heating_Z heating {get;set;} 
		public Cooling_Y cooling {get;set;} 
		public Cooling_Y waterHeating {get;set;} 

		public Equipment(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'equipmentType') {
							equipmentType = parser.getText();
						} else if (text == 'heating') {
							heating = new Heating_Z(parser);
						} else if (text == 'cooling') {
							cooling = new Cooling_Y(parser);
						} else if (text == 'waterHeating') {
							waterHeating = new Cooling_Y(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Equipment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Heating {
		public Double efficiency {get;set;} 
		public String efficiencyType {get;set;} 
		public Integer capacity {get;set;} 

		public Heating(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiency') {
							efficiency = parser.getDoubleValue();
						} else if (text == 'efficiencyType') {
							efficiencyType = parser.getText();
						} else if (text == 'capacity') {
							capacity = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'Heating consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class HotWater_Z {
		public Double efficiency {get;set;} 
		public String efficiencyType {get;set;} 
		public Boolean isTankless {get;set;} 
		public Integer tankSize {get;set;} 

		public HotWater_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiency') {
							efficiency = parser.getDoubleValue();
						} else if (text == 'efficiencyType') {
							efficiencyType = parser.getText();
						} else if (text == 'isTankless') {
							isTankless = parser.getBooleanValue();
						} else if (text == 'tankSize') {
							tankSize = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'HotWater_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class HotWater {
		public Integer efficiency {get;set;} 
		public String efficiencyType {get;set;} 
		public Boolean isTankless {get;set;} 
		public Integer tankSize {get;set;} 

		public HotWater(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiency') {
							efficiency = parser.getIntegerValue();
						} else if (text == 'efficiencyType') {
							efficiencyType = parser.getText();
						} else if (text == 'isTankless') {
							isTankless = parser.getBooleanValue();
						} else if (text == 'tankSize') {
							tankSize = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'HotWater consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PercentLED {
		public Double interior {get;set;} 
		public Integer exterior {get;set;} 
		public Integer garage {get;set;} 

		public PercentLED(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'interior') {
							interior = parser.getDoubleValue();
						} else if (text == 'exterior') {
							exterior = parser.getIntegerValue();
						} else if (text == 'garage') {
							garage = parser.getIntegerValue();
						} else {
							//system.debug(LoggingLevel.WARN, 'PercentLED consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AssemblyDetails {
		public Integer cavityR {get;set;} 
		public List<String> cavityInsulationGrade {get;set;} 
		public List<String> cavityInsulationMaterial {get;set;} 
		public Integer continuousR {get;set;} 
		public List<Integer> framingSpacing {get;set;} 
		public List<Double> framingDepth {get;set;} 
		public List<Double> framingFraction {get;set;} 

		public AssemblyDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'cavityR') {
							cavityR = parser.getIntegerValue();
						} else if (text == 'cavityInsulationGrade') {
							cavityInsulationGrade = arrayOfString(parser);
						} else if (text == 'cavityInsulationMaterial') {
							cavityInsulationMaterial = arrayOfString(parser);
						} else if (text == 'continuousR') {
							continuousR = parser.getIntegerValue();
						} else if (text == 'framingSpacing') {
							framingSpacing = arrayOfInteger(parser);
						} else if (text == 'framingDepth') {
							framingDepth = arrayOfDouble(parser);
						} else if (text == 'framingFraction') {
							framingFraction = arrayOfDouble(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'AssemblyDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Summary {
		public Integer conditionedArea {get;set;} 
		public Integer conditionedVolume {get;set;} 
		public Double windowArea {get;set;} 
		public Integer wallArea {get;set;} 
		public Integer floorArea {get;set;} 
		public Integer ceilingArea {get;set;} 
		public Integer slabArea {get;set;} 
		public Integer totalThermalBoundaryArea {get;set;} 
		public Integer aboveGradeThermalBoundaryArea {get;set;} 
		public DominantWallType dominantWallType {get;set;} 
        public DominantFramedFloorType dominantFramedFloorType {get;set;} 
		public DominantFoundationWallType dominantFoundationWallType {get;set;} 
		public DominantSlabType dominantSlabType {get;set;} 
		public DominantRimJoistType dominantRimJoistType {get;set;} 
		public DominantCeilingType dominantCeilingType {get;set;} 
		public DominantWindowType dominantWindowType {get;set;} 
		public DominantDoorType dominantDoorType {get;set;} 

		public Summary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'conditionedArea') {
							conditionedArea = parser.getIntegerValue();
						} else if (text == 'conditionedVolume') {
							conditionedVolume = parser.getIntegerValue();
						} else if (text == 'windowArea') {
							windowArea = parser.getDoubleValue();
						} else if (text == 'wallArea') {
							wallArea = parser.getIntegerValue();
						} else if (text == 'floorArea') {
							floorArea = parser.getIntegerValue();
						} else if (text == 'ceilingArea') {
							ceilingArea = parser.getIntegerValue();
						} else if (text == 'slabArea') {
							slabArea = parser.getIntegerValue();
						} else if (text == 'totalThermalBoundaryArea') {
							totalThermalBoundaryArea = parser.getIntegerValue();
						} else if (text == 'aboveGradeThermalBoundaryArea') {
							aboveGradeThermalBoundaryArea = parser.getIntegerValue();
						} else if (text == 'dominantWallType') {
							dominantWallType = new DominantWallType(parser);
						} else if (text == 'dominantFoundationWallType') {
							dominantFoundationWallType = new DominantFoundationWallType(parser);
						}else if (text == 'dominantFramedFoorType') {
							dominantFramedFloorType = new DominantFramedFloorType(parser);
						} else if (text == 'dominantSlabType') {
							dominantSlabType = new DominantSlabType(parser);
						} else if (text == 'dominantRimJoistType') {
							dominantRimJoistType = new DominantRimJoistType(parser);
						} else if (text == 'dominantCeilingType') {
							dominantCeilingType = new DominantCeilingType(parser);
						} else if (text == 'dominantWindowType') {
							dominantWindowType = new DominantWindowType(parser);
						} else if (text == 'dominantDoorType') {
							dominantDoorType = new DominantDoorType(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Summary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Thermostats {
		public String thermostatType {get;set;} 
		public String makeAndModel {get;set;} 
		public String serialNumber {get;set;} 

		public Thermostats(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'thermostatType') {
							thermostatType = parser.getText();
						} else if (text == 'makeAndModel') {
							makeAndModel = parser.getText();
						} else if (text == 'serialNumber') {
							serialNumber = parser.getText();
						} else {
							//system.debug(LoggingLevel.WARN, 'Thermostats consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public static housePlanJSON2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new housePlanJSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	/*
    private static List<RimJoists> arrayOfRimJoists(System.JSONParser p) {
        List<RimJoists> res = new List<RimJoists>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new RimJoists(p));
        }
        return res;
    }
*/






    private static List<DominantMechanicalVentilationType> arrayOfDominantMechanicalVentilationType(System.JSONParser p) {
        List<DominantMechanicalVentilationType> res = new List<DominantMechanicalVentilationType>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DominantMechanicalVentilationType(p));
        }
        return res;
    }


    private static List<Integer> arrayOfInteger(System.JSONParser p) {
        List<Integer> res = new List<Integer>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getIntegerValue());
        }
        return res;
    }

/*
    private static List<Doors> arrayOfDoors(System.JSONParser p) {
        List<Doors> res = new List<Doors>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Doors(p));
        }
        return res;
    }

*/











/*

    private static List<Ceilings> arrayOfCeilings(System.JSONParser p) {
        List<Ceilings> res = new List<Ceilings>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Ceilings(p));
        }
        return res;
    }


    private static List<Slabs> arrayOfSlabs(System.JSONParser p) {
        List<Slabs> res = new List<Slabs>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Slabs(p));
        }
        return res;
    }
*/


    private static List<mechanicalEquipment> arrayOfMechanicalEquipment(System.JSONParser p) {
        List<mechanicalEquipment> res = new List<mechanicalEquipment>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new mechanicalEquipment(p));
        }
        return res;
    }



	public class mechType {
		public String id {get;set;} 
		public String fuel {get;set;} 
		public String equipmentType {get;set;}
        public mechTypeEff heat {get;set;} 
        public mechTypeEff cool {get;set;}
        public mechTypeEff water {get;set;}

		public mechType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'fuel') {
							fuel = parser.getText();
						} else if (text == 'equipmentType') {
							equipmentType = parser.getText();
						}else if (text == 'heating') {
							mechTypeEff heat = new mechTypeEff(parser);
						}else if (text == 'cooling') {
							mechTypeEff cool = new mechTypeEff(parser);
						}else if (text == 'hotWater') {
							mechTypeEff water = new mechTypeEFf(parser);
						} else {
							//system.debug(LoggingLevel.WARN, 'Thermostats consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public class mechTypeEff {
		public string efficiency {get;set;} 
		public String efficiencyType {get;set;} 
		public String capacity {get;set;}
        

		public mechTypeEff(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'efficiency') {
							efficiency = string.valueOf(parser.getText());
						} else if (text == 'efficiencyType') {
							efficiencyType = string.valueOf(parser.getText());
						} else if (text == 'capacity') {
							capacity = string.valueOf(parser.getText());
						} else {
							//system.debug(LoggingLevel.WARN, 'Thermostats consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	







    private static List<Thermostats> arrayOfThermostats(System.JSONParser p) {
        List<Thermostats> res = new List<Thermostats>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Thermostats(p));
        }
        return res;
    }




    private static List<Ducts> arrayOfDucts(System.JSONParser p) {
        List<Ducts> res = new List<Ducts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Ducts(p));
        }
        return res;
    }
/*

    private static List<Windows> arrayOfWindows(System.JSONParser p) {
        List<Windows> res = new List<Windows>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Windows(p));
        }
        return res;
    }
*/








    private static List<FramedFloors> arrayOfFramedFloors(System.JSONParser p) {
        List<FramedFloors> res = new List<FramedFloors>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new FramedFloors(p));
        }
        return res;
    }



    private static List<Double> arrayOfDouble(System.JSONParser p) {
        List<Double> res = new List<Double>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getDoubleValue());
        }
        return res;
    }


/*

    private static List<Walls> arrayOfWalls(System.JSONParser p) {
        List<Walls> res = new List<Walls>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Walls(p));
        }
        return res;
    }


    private static List<FoundationWalls> arrayOfFoundationWalls(System.JSONParser p) {
        List<FoundationWalls> res = new List<FoundationWalls>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new FoundationWalls(p));
        }
        return res;
    }
*/




    private static List<Equipment> arrayOfEquipment(System.JSONParser p) {
        List<Equipment> res = new List<Equipment>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Equipment(p));
        }
        return res;
    }







    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }









    private static List<DominantDistributionSystem> arrayOfDominantDistributionSystem(System.JSONParser p) {
        List<DominantDistributionSystem> res = new List<DominantDistributionSystem>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DominantDistributionSystem(p));
        }
        return res;
    }






}