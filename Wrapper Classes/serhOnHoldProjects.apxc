// wrapper class that makes a view of projects that are on hold
// It includes buttons to push files to the auto qa process
// 
// David Pedrick
// 9.18.2019


public class serhOnHoldProjects {

    List<ProjWrapper> projs {get;set;}
    List<id> projIdList {get;set;}
    private String state = '';
    public String lastRefresh {get; set;}
    

    // instantiate the StandardSetController from a query locator
    public ApexPages.StandardSetController con {
        get {
            if(con == null) {
                List<recordtype> recordTypeList = [select name, id from recordtype where name= 'Auto QA' and sobjecttype = 'Inspections__c'];
        		id recordId = recordTypeList.get(0).id;
                con = new ApexPages.StandardSetController(Database.getQueryLocator([Select name, id, Project_Status__c, Createddate, 
                                                                                    Hers_Rater__c, hers_rater__r.Name,
                                                                                    Rating_Field_Inspector__c, Rating_Field_Inspector__r.Name,
                                                                                    hers_rater__r.number_of_needed_file_qa__c, Ekotrope_Link__c,
                                                                                    hers_rater__r.Number_of_File_QA_Started__c,
                                                                                    SERH_Number_of_Units__c, Number_of_Inspections__c,
                                                                                    Ekotrope_ID__c,
                                                                                    (select ENERGY_STAR_v3__c, Rating_Type__c, Fee_per_Unit__c, Project_Type__c
                                                                                     from SERH_Data__r where Export_Type__c = 'HERS'),
                                                                                    (select Ekotrope_QA_error__c, Building_Registry_Upload_Error__c, mismatched_RTIN__c 
                                                                                     from Inspections__r)
                                                                                    from project__c where Project_Status__c = 'On Hold'
                                                                                    and recordtypeid = '0120B000000t8JVQAY'
                                                                                    Order By Createddate desc limit 100]));
                // sets the number of records in each page set
                con.setPageSize(10);
                
            }
            List<AsyncApexJob> jobList = [SELECT Id, Status, ApexClass.Name, completeddate
                      FROM AsyncApexJob where apexclass.name='SERHprojectRegistryUpdater' and Status='Completed'
                      Order by CompletedDate desc limit 1];
            if (joblist.size()>0) lastRefresh = joblist.get(0).completedDate.format();
            
           
            return con;
        }
        set;
    }

    // returns a list of wrapper objects for the sObjects in the current page set
    public List<ProjWrapper> getProjects() {
        projs = new List<ProjWrapper>();
        for (Project__c proji : (List<Project__c>)con.getRecords())
            projs.add(new ProjWrapper(proji));
        System.Debug('found '+String.valueOf(projs.size()));
        return projs;
    }
   
    // Uploads selected projects to building registry
     public PageReference process() {
         projIdList = new List<string>();
         if (projs.size() > 0){
             for (ProjWrapper p : projs) {
             	if (p.checked){
                    id projectId = p.proj.id;
                    Project__c projectRecord;
                    system.debug(projectId);
                    system.debug(p);
                    projectRecord = [SELECT Ekotrope_ID__c, Project_Status__c, ID
                             FROM Project__c WHERE ID = :projectId];
                    system.debug(projectRecord);
                    projIdList.add(projectRecord.Ekotrope_ID__c);
                    //projectRecord.Project_Status__c = 'In Progress';
                    //update projectRecord;
                }
             }
             SERH.determineQaNeed(projIdList);
         } 
         return null;
     }
    

    public class ProjWrapper {
        public id projId {get;set;}
  	    public Boolean checked{ get; set; }
 	    public Project__c proj { get; set;}
        public String ProjStatus {get; set;}
        public String creaxDate {get; set;}
        //public Decimal QAleft {get; set;}
        public String ESv3Status {get; set;}
        //public Decimal feePerUnit {get; set;}
        public String RatingType {get; set;}
        public Boolean userTypeError{ get; set; }
        public Boolean registryError{ get; set; }
        public Boolean ekotropeError{ get; set; }
        public string buildingType{ get; set; }
        public Boolean autoApproval{get;set;}

        public ProjWrapper(){
            proj = new Project__c(); 
            checked = false;
            creaxDate = 'no Project Entered';
            //QAleft = 0;
            ESv3Status = '';
            //feePerUnit = 0;
            ProjStatus = '';
            userTypeError = false;
            registryError = false;
            ekotropeError = false;
            buildingType = '';
            autoApproval = false;
        }

        public ProjWrapper(Project__c p){
            List<recordtype> recordTypeList = [select name, id from recordtype where name= 'Auto QA' and sobjecttype = 'Inspections__c'];
        	id recordId = recordTypeList.get(0).id;
            system.debug(p.HERS_Rater__c);
            id raterId = p.Hers_Rater__c;
            List<Qualifications_del__c> raterQuals = [Select Approved_for_Auto_Upload__c, id, Qualifications_for__c
                                                          From Qualifications_del__c where Qualifications_for__c = :raterId and HERS_RTIN_Rater_Identification_Number__c !=''];// 
            system.debug(raterQuals);
            Qualifications_del__c oneRaterQual = raterQuals.get(0);
            
            proj = p;
	        checked = false;
            ProjStatus = p.Project_Status__c;
            //projId = p.id;
            //CreatedDate formatting so it's not in GMT!
            //<3 lucky we're in a rapper class! <3
            creaxDate = p.CreatedDate.format();
            //Now let's add some formula columns
            //First, we want QA remaining
            //That means Needed minus Started
			autoApproval = oneRaterQual.Approved_for_Auto_Upload__c;
            system.debug('Project Name' + p.Name + 'serh data size: ' + p.SERH_Data__r.size());
            //Now Energy Star Status and Type from the HERS record
            if (p.SERH_Data__r.size() > 0){
                SERH_Data__c currDat = p.SERH_Data__r[0];
                RatingType = currDat.Rating_Type__c;
                ESv3Status = currDat.ENERGY_STAR_v3__c;
                buildingType = currDat.Project_Type__c;
                
            } else{
                RatingType = '';
                ESv3Status = '';
                buildingType = '';
            }
            if (p.Inspections__r.size() > 0){
                
                Inspections__c currInsp = p.Inspections__r[0];
                registryError = currInsp.Building_Registry_Upload_Error__c;
                ekotropeError = currInsp.Ekotrope_QA_error__c;
                userTypeError = currInsp.mismatched_RTIN__c;
                
            } else{
                registryError = false;
                ekotropeError = false;
                userTypeError = false;
            }
	    }
	}
}