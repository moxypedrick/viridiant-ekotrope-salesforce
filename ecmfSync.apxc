global class ecmfSync implements Database.Batchable<String>, Database.AllowsCallouts, Database.Stateful  {
   
    
    global List<String> projectIdList = new List<String>();
    global String authorization = '';
    private List<string> ekotropeStages = new List<string>();
    global List<Object> newResults = new List<Object>();
    global Map<String, String> existingViridiantMfProjectsMap = new Map<String, String>();
    global Map<String, List<String>> existingViridiantMFProjectsMapSfID = new Map<String, List<String>>(); 
    global Map<String, String> ekoIdMap = new Map<String, String>();
    
     private final List<string> codesToCheck = new List<string>();
    private final List<string> buildingsToCheck = new List<string>();
     private string baselineBuilding = '';
    private string referenceBuilding = '';
    private string designBuilding = '';
    private string dataPrefix = '';
    
    global List<Project__c> ekotropeIdList = new List<Project__c>();
    global List<Building_Specifications__c> buildingSpecList = new List<Building_Specifications__c>();
    global List<Unit_Takeoff__c> unitTakeoffList = new List<Unit_Takeoff__c>();
    global List<HERS_Data__c> hersDataList = new List<HERS_Data__c>();
    
    
    global void setVariables(list<string> stage){
        //This sets which Ekotrope Status this code queries from the Project List API
    	//The options are: "SUBMITTED_FOR_QA", "SUBMITTED_TO_REGISTRY", "UNREGISTERED",
    	//"REGISTERED_WITH_PROVIDER"
        ekotropeStages = stage;
    }
    
    global void setCodesToCheck(List<string> codes){
        //Sets codes which will be evaluated for compliance
    	//in the Ekotrope calculation engine.
        integer i = codes.size();
        integer beg = 0;
        while(beg < i){
            codesToCheck.add(codes[beg]);
            beg++;
        }
    }

    global void setBuildingRun(string baseline, string reference, string design){
        //The SERH Data object has fields to hold energy use data for three types of
        //home analysis. These results represent the three basic home energy evaluations
    	//for a HERS Rating - (HERS Index = ???? / Reference ; D)
        baselineBuilding = baseline;
        referenceBuilding = reference;
        designBuilding = design;
        buildingsToCheck.add(baseline);
        buildingsToCheck.add(reference);
        buildingsToCheck.add(design);
        }

    global void setEnergyDataName(string prefix){
        //This sets the SERH Data records Upload Type field. This should be
    	//descriptive of the setBuildingRun scenario. Current Salesforce field optoins are
    	//HERS, 2012 IECC, 2009 IECC
        dataPrefix = prefix;
        //System.Debug('Set prefix to '+prefix);
    }  
      
    global void setAuthorization(){
        //A regular run (TRUE) is a run in which we create projects and serh data with status
    	//HERS. If we want to make serh data that is not of status "HERS" the setNonRegRun
    	//should be set to FALSE.
        //Authorization = auth;
        
        //Account credentials = [Select id from Account WHERE Name = 'Southface'];//, Ekotrope_Password__c, Ekotrope_Username__c
        //system.debug(credentials.Ekotrope_Password__c);
        
        String username = 'viridiant-api';//credentials.Ekotrope_Username__c;
        String password = '3bE{hh@AEB';//credentials.Ekotrope_Password__c;
        Blob headerValue = Blob.valueOf(username + ':' + password);
        authorization = ('Basic ' + EncodingUtil.base64Encode(headerValue));  
        
        system.debug(authorization);
    }

    global Iterable<String> start(Database.BatchableContext bc){
         
        //just get add records where they do not exist and update records where they do
        //if ekotrope_self is blank, then add
        //if ekotrope_self is filled, check to see if update is necessary      
        // Now we need to get the MF ratings that have specified EkoIds          
        for(Unit_Takeoff__c existingMfProject : [Select Ekotrope_Model_ID__c, Ekotrope_selfOrPlanLastSavedAt__c, ID, Name   
                FROM Unit_Takeoff__c
                where Ekotrope_Model_ID__c != null and Ekotrope_selfOrPlanLastSavedAt__c = null])
                {
                    existingViridiantMfProjectsMap.put(existingMfProject.Id, 'add-record');
                }
      
          for(Unit_Takeoff__c existingMfProject : [
                Select Ekotrope_Model_ID__c, Ekotrope_selfOrPlanLastSavedAt__c, ID, Name   
                FROM Unit_Takeoff__c
                where Ekotrope_Model_ID__c != null and Ekotrope_selfOrPlanLastSavedAt__c != null])
                {
                    List<String> updateStatusList = new List<String>();
                    updateStatusList.add(existingMfProject.Ekotrope_Model_ID__c);
                    updateStatusList.add(existingMfProject.Id);
                    existingViridiantMFProjectsMapSfID.put(existingMFProject.Id, updateStatusList);
                    //existingViridiantMfProjectsMap.put(existingMfProject.Ekotrope_Model_ID__c, existingMfProject.Ekotrope_selfOrPlanLastSavedAt__c);
                }
     
        for(string ekoStage : ekotropeStages){       
            if(test.isRunningTest()){Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpProjListCallout());}  
            HttpResponse projectListResponse = ekotropeSync.getProjectList(authorization, ekoStage);        
            if(projectListResponse.getStatusCode() == 200){
                String newProjectList = String.valueOf(projectListResponse.getBody());
                if(projectListResponse.getBody() != ''){
                    newResults = (List<Object>)JSON.deserializeUntyped(newProjectList);                  
                    //iterate over all projects in ekotrope and add them to map          
                    for(Object project : newResults){
                        Map<String, Object> projectData = (Map<String, Object>)project;
                        //load ekotrope results into a map
                        ekoIdMap.put(String.valueOf(projectData.get('id')),String.valueOf(projectData.get('selfOrPlanLastSavedAt')));
                    }
                }
            }
        }
        //iterate over existingViridiantMFProjectsMapSfID
        //query the ekoIdMap and see if any selfOrPlanLastSavedAt are different 
        //to determine if any projects need updated
                    
        for(string salesforceID : existingViridiantMFProjectsMapSfID.keySet()){
            system.debug(salesforceID);
            //get the eko Id for this project
            String ekoId = existingViridiantMFProjectsMapSfID.get(salesforceID)[0];
            //get the lastplansaved date for this proejct
            String saveDate = existingViridiantMFProjectsMapSfID.get(salesforceID)[1];
            //get ekotropes' lastplansaved date
            String ekoSaveDate = ekoIdMap.get(ekoId);
            if(saveDate != ekoSaveDate){
                existingViridiantMfProjectsMap.put(salesforceID, 'update-record');
            }  
        }                          
    
        projectIdList.addAll(existingViridiantMfProjectsMap.keySet());        
        // List of salesforce ids which need to be updated or added to salesforce
        // these are all ecmf projects so just the worst case model is added
        // they do not count towards  
        system.debug(projectIdList);
        return projectIdList;
    }
   
    global void execute(Database.BatchableContext bc, List<String> projectsToUpdate){
        //Use the salesforce ids to get update or add the necessary energy model data
        //
        //iterate through ids
        //each id review the map to determine if they are to to updated or added
        //
        //construct the HERS record, unit record, building record, and project for each
        //upsert the records
        List<Log__c> errorLogs = new List<Log__c>();
        
        String raterId = null;
        String RFI_Rater = null;
        String project_status = null;
        system.debug('iterate over projectsToUpdate:');
        for(String projectId:projectsToUpdate){
            //we update the data or create the new records
			system.debug(projectId);
            Unit_Takeoff__c unitTakeoff;
            unitTakeoff = [SELECT Ekotrope_Model_ID__c, Ekotrope_selfOrPlanLastSavedAt__c,
                             ID, Name
                             FROM Unit_Takeoff__c WHERE Id = :projectId];
            
            String ekoProjectId = unitTakeoff.Ekotrope_Model_ID__c;
            system.debug(ekoProjectId);
            // first get all of the necessary information from ekotrope
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpProjectCallout() ); }           
            HttpResponse projectResponse = ekotropeSync.getProject(authorization, ekoProjectId);
            system.debug(projectResponse.getBody());
            
            if(projectResponse.getStatusCode() == 418){
                system.debug('Project has status code 418: '+projectId);
                system.debug(projectResponse.getBody());
                Log__c errorLog = ekotropeSync.constructErrorLog('getProject','getProject', projectResponse, ekoProjectId, projectResponse.getBody());  
                errorLogs.add(errorLog);
            } else if(projectResponse.getStatusCode() == 200){
                String newProject = String.valueOf(projectResponse.getBody());
                projectJSON2Apex.aProjectJSON2Apex qProject = projectJSON2Apex.parse(newProject);

              
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpDesignCallout() ); }
                system.debug(qProject.masterPlanId);
                HttpResponse planResponse = ekotropeSync.getHousePlan(authorization, qProject.masterPlanId);  
                system.debug(planResponse.getBody());
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpAnalysisCallout() ); }
                HttpResponse analysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'EkotropeAsModeled', codesToCheck);
                system.debug(analysisResponse.getBody());
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpAnalysisCallout() ); }
                HttpResponse ReferenceAnalysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSReference', codesToCheck);
                system.debug(ReferenceAnalysisResponse.getBody());
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpAnalysisCallout() ); }
                HttpResponse DesignanalysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSRated', codesToCheck);
				system.debug(DesignanalysisResponse.getBody());
                
                
                
                //Complete the response parsing and record creation only if all HTTP callouts were successful
                if(planResponse.getStatusCode() == 200 && analysisResponse.getStatusCode() == 200 && ReferenceAnalysisResponse.getStatusCode() == 200 && DesignanalysisResponse.getStatusCode() == 200){
                    String plan = String.valueOf(planResponse.getBody());
                    planJson2Apex.aPlanJson2Apex qplan = planJson2Apex.parse(plan);
                    String AsIsAnalysis = String.valueOf(analysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex AsIsAnalysisResults = analysisJson2Apex.parse(AsIsAnalysis);                
                    String ReferenceAnalysis = String.valueOf(ReferenceAnalysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex ReferencenalysisResults = analysisJson2Apex.parse(ReferenceAnalysis);
                    String DesignAnalysis = String.valueOf(DesignanalysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex DesignAnalysisResults = analysisJson2Apex.parse(DesignAnalysis);
                    system.debug(Limits.getCpuTime());
                    
                    
                    
                    //Now have project, design, and three analysis responses
                    //
                    //lets do update first: 
                    if(existingViridiantMfProjectsMap.get(projectId)=='update-record'){
                                              
                        system.debug('Updating-record');
                        system.debug(projectId);
                        Log__c errorLog = EkotropeSync.constructErrorLog('update-record','update-record', projectResponse, ekoProjectId, projectResponse.getBody());
                        errorLogs.add(errorLog);
                        
                        system.debug(projectResponse.getBody());
                        
                    } else{
                        Log__c errorLog = EkotropeSync.constructErrorLog('creating-record','update-record', projectResponse, ekoProjectId, projectResponse.getBody());
                        errorLogs.add(errorLog);
                        system.debug('Create-record');
                        system.debug(projectId);
                        //create new records
                    }
                    //if this is a test method we need to set the appropriate mock class
                }
                else{
                    system.debug('Not all http callouts were successfull. Project == 200, others ?');
                    if(planResponse.getStatusCode() != 200){
                        system.debug('planResponse code:');
                        system.debug(planResponse.getStatusCode());
                        Log__c errorLog = ekotropeSync.constructErrorLog('getHousePlan','getHousePlan', planResponse, ekoProjectId, planResponse.getBody());
                        errorLogs.add(errorLog);
                    } 
                    if(analysisResponse.getStatusCode() != 200){
                        system.debug('analysisResponse code:');
                        system.debug(analysisResponse.getStatusCode());
                        Log__c errorLog = EkotropeSync.constructErrorLog('getHousePlanAnalysis - EkotropeAsModeled','getHousePlanAnalysis', analysisResponse, ekoProjectId, analysisResponse.getBody());
                        errorLogs.add(errorLog);
                        
                    } 
                    if(ReferenceAnalysisResponse.getStatusCode() != 200){
                        system.debug('ReferenceAnalysisResponse code:');
                        system.debug(ReferenceAnalysisResponse.getStatusCode());
                        Log__c errorLog = EkotropeSync.constructErrorLog('getHousePlanAnalysis - HERSReference','getHousePlanAnalysis', ReferenceAnalysisResponse, ekoProjectId, ReferenceAnalysisResponse.getBody());
                        errorLogs.add(errorLog);
                    } 
                    if(DesignanalysisResponse.getStatusCode() != 200){
                        system.debug('DesignanalysisResponse code:');
                        system.debug(DesignanalysisResponse.getStatusCode());
                        Log__c errorLog = EkotropeSync.constructErrorLog('getHousePlanAnalysis - HERSRated','getHousePlanAnalysis', DesignanalysisResponse, ekoProjectId, DesignanalysisResponse.getBody());
                        errorLogs.add(errorLog);
                    }
                } 
            }
            else{
                Log__c errorLog = EkotropeSync.constructErrorLog('getProject','getProject', projectResponse, ekoProjectId, projectResponse.getBody());
                errorLogs.add(errorLog);
                system.debug(projectId);
                system.debug(projectResponse.getBody());
            } 
   
        }
    }
    global void finish(Database.BatchableContext bc){}

}