/* was called SERH */
global class ekotropeSync implements Database.Batchable<String>, Database.AllowsCallouts, Database.Stateful {
    
    global String newProjectsList = '';
    private String ekotropeStatus = '';
    private String updateStatus = '';
    private List<string> ekotropeStages = new List<string>();
    private boolean regularRun = True;
    private string baselineBuilding = '';
    private string referenceBuilding = '';
    private string designBuilding = '';
    private string dataPrefix = '';
    global String authorization = ''; //('Basic ' + EncodingUtil.base64Encode(headerValue));


    global List<Project__c> ekotropeIdList = new List<Project__c>();
    //global List<SERH_Data__c> serhDataList = new List<SERH_Data__c>();
    global List<String> projectIdList = new List<String>();
	//global HttpResponse projectListResponse = new HttpResponse();
	global List<Object> newResults = new List<Object>();
    
    global Map<String, String> accountsMap = new Map<String, String>();
    global Map<String, String> raterMap = new Map<String, String>();
    
    global Map<String, String> existingViridiantProjectsMap = new Map<String, String>();
    global Map<String, String> existingViridiantMfProjectsMap = new Map<String, String>();
    global Map<String, String> existingViridiantMFProjectsMapSfID = new Map<String, String>();
    
    private final Map<String, String> globalProjectUpdateStatusList = new Map<String, String>();
    
    
    global Map<String, String> serhDataMap = new Map<String, String>();
    
    
    private final List<string> codesToCheck = new List<string>();
    private final List<string> buildingsToCheck = new List<string>();

    
	public static Project__C constructProject(projectJSON2Apex.aProjectJSON2Apex aProject, analysisJson2Apex.pAnalysisJson2Apex bsIsAnalysisResults, String HERSrater, Id RFI, String ratingOrganization, String status, String updateStatus) {
		//Record constructor methods
        Date EC_Registration_Date = Date.newInstance(1999, 1, 1);
        Date Rating_Date = Date.newInstance(1999, 1, 1);
        projectJSON2Apex.aProjectJSON2Apex qProject = aProject;
        analysisJson2Apex.pAnalysisJson2Apex qAnalyis = bsIsAnalysisResults;

        integer i = qAnalyis.Compliance.size();
        integer count = 0;
        String energyStar = 'Fail';

        while (count < i){
            List<string> codesToCheck = new List<string>();
            If (qAnalyis.Compliance[count].code == 'EnergyStarV3'){
                if(qAnalyis.Compliance[count].complianceStatus == 'Warn'){
                    energyStar = 'Pass';
                } else{
                    energyStar = qAnalyis.Compliance[count].complianceStatus;
                      }

            }
            count++;
        }


        if (qProject.hersRatingDetails.ratingDate != null){
                EC_Registration_Date =  Date.newInstance(
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.ratingDate).substring(0,4)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.ratingDate).substring(5,7)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.ratingDate).substring(8,10)));
            }else{
                EC_Registration_Date = null;
            }
            if (qProject.hersRatingDetails.fieldRatingDate != null){
               Rating_Date = Date.newInstance(
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.fieldRatingDate).substring(0,4)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.fieldRatingDate).substring(5,7)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.fieldRatingDate).substring(8,10)));
            }else{
                Rating_Date = null;
            }

        Project__c projectRecord = new Project__c(
            /*SERH_Number_of_Units__c = 1,
            Name = qProject.location.streetAddress.abbreviate(80),
            Development_Text__c = qProject.community,
            Builder_SERH__c = qProject.builder,
            HERS_Rater__c = HERSrater,
            RemRate_Version__c = 'Ekotrope-' + qProject.algorithmVersion,
            Rating_Date__c = Rating_Date,
            Ekotrope_URL__c = 'https://app.ekotrope.com/#project:'+qProject.id,
            RESNET_Registry_ID__c = qProject.hersRatingDetails.registryId,
            Ekotrope_ID__c = qProject.id,
            EC_Registration_Date__c =  EC_Registration_Date,
            Street_Address__c = qProject.location.streetAddress,
            City__c = qProject.location.city,
            State__c = qProject.location.state,
            Zip_Code__c = qProject.location.zip,
            RecordTypeId = '0120B000000t8JVQAY',
            OwnerId = '005U0000000cZ8eIAE', 
            Ekotrope_selfOrPlanLastSavedAt__c = qProject.selfOrPlanLastSavedAt,
            Rating_Organization__c = ratingOrganization,
            Rating_Field_Inspector__c = RFI,
            Energy_Star_v3__c = energyStar*/
        );

        /*
        if (status == 'SUBMITTED_TO_REGISTRY'){
            projectRecord.Project_Status__c = 'Completed';
        } else if(status == 'SUBMITTED_FOR_QA' && updateStatus == 'update status'){
                projectRecord.Project_Status__c = 'In Progress';
        } else if(status == 'Error'){
            projectRecord.Project_Status__c = 'On Hold';
        } else if (status == 'On Hold' && updateStatus == 'update status'){
            projectRecord.Project_Status__c = 'On Hold';
        } else if(status == 'In Progress' && updateStatus == 'update status'){
            projectRecord.Project_Status__c = 'In Progress';
        }*/
        

        return projectRecord;
	}
  
    public static Building_Specifications__C constructBuildingSpec(){
        
        Building_Specifications__c buildSpecRecord = new Building_Specifications__C(
        //Project__c = , 
        //Project_Address = , //this is a formula field from the Project (Project__r.Street_Address__c)
        //Building_Address_If_not_same_as_proj__c = , 
        // 
        );
        
        return buildSpecRecord;
    }

    public static Unit_Takeoff__c constructTakeoffRecord(){
        Date Registration_Date = Date.newInstance(1999, 1, 1);
        
        Unit_Takeoff__c unitTakeoffRecord = new Unit_Takeoff__c(
            bedrooms__c = 1, 
            Band_Height__c = 1, 
            Ceiling_Height__c = 1, 
            //CFM50__c = 1, //formula
            //Duct_Leakage_to_the_Outside__c = 1, //formula
            //Duct_Leakage_Total__c = 1, //formula
            //ALl the goals are inputs - do I write over those? 
            Floor_Area__c = 1, 
            Full_Perimeter__c = 1, 
            RESNET_Registration_Date__c = Registration_Date,
            RESNET_Registry_ID__c = '12134091', 
            //SFBE__c = 1,  //approximate formula. Can we get rid of the formula and write the actual value from ekotrope?
            Unit_Type__c = 'interior',
            Name = 'hers-projectname'
            //Volume__c = 123123  //approximate formula. Can we get rid of the formuala and write actual volume from ekotrope?    
        );
        return unitTakeoffRecord;
    }
    
    public static HERS_Data__c constructEnergyDataRecord(){
        HERS_Data__c hersEnergyRecord = new HERS_Data__c(
            Name = 'lakdsf', 
            RESNET_Registry_ID__c = '1312lkj'             
        );
        return hersEnergyRecord;
    }
   
    public static Inspection__c constructInspectionRecord(ID unitTakeoffId) {
        Unit_Takeoff__c unitTakeoffRecord;
        unitTakeoffRecord = [SELECT Name, RESNET_Registration_Date__c FROM Unit_Takeoff__c WHERE ID = :unitTakeoffId];
        //projectRecord.Project_Status__c = 'Pending Review';
        //update unitTakeoffRecord;
        string year;
        if(unitTakeoffRecord.RESNET_Registration_Date__c != null){
            year = String.valueOf(unitTakeoffRecord.RESNET_Registration_Date__c.year()); //
        } else {
            year = String.valueOf(datetime.now().year());
        }

        boolean estar = false;

        Inspection__c inspectionRecord = new Inspection__c(
            //Project__c = projectID,
            //Project_Temporary_Name__c = projectRecord.Name,
            //QA_Year_SERH__c = year,
            //HERS_Rater_Name_SERH__c = projectRecord.HERS_Rater__c,
            //Status__c = 'New',
            //Energy_STAR__c = estar,
            //RecordTypeId = '0120B0000005kLZQAY'
            //Name = 'asdf'
        );

        return inspectionRecord;
	}
    
    public Map<string, list<string>> match(List<Project__c> addProjects, Map<String, String> existingProjects){
        //addProjects is a list projects (new from ekotrope) to be matched with existing SF records
        //
        //existingProjects is a list of SF records. Key is project id and value is levenshtein value
        //
        //
        //function takes a list of ekotrope projects (at this point they are either unit takeoffs
        //or full on projects, building, etc (and later we merge the records)). It also takes a map
        //of all of the existing projects that we look for matches in. The function
        //returns a map of likely matches. 
        //
        //
        //   
             
        map<string, list<string>> matchString = new map<string, list<string>>();
        
        Set<string> existingProjectsSet = existingProjects.keySet();              
        for(string lechValue:existingProjectsSet){
            for(Project__c project:addProjects){
                //make lechValue for project, determine which ones are close
                string name = project.name;
                string street = project.street_address__c;
                string city = project.city__c;
                string state = project.state__c;
                string lechString = normalizeLechString(name, street, city, state);  
                Integer similarity = lechString.getLevenshteinDistance(existingProjects.get(lechValue));                
                double ratio1 = ((double) similarity) / (Math.max(lechString.length(), existingProjects.get(lechValue).length()));
				// if levenshtein ratio is sufficiently high add this existing project to a map of potential matches
                if(ratio1 < 0.4){
                    matchString.get(project.id).add(lechValue);
                }                 
            }
        }
        return matchString;
    }
    
    public string normalizeLechString(String projName, String street, String city, String state){//,String City, String State, String zipCode
        //project name - first token
        //street - second token
        //city - third
        //state - fourth
        //zipcode - fifth
        Map<String, String> stopWords = new Map<String, String>{'xing '=>'crossing','wy'=>'way','wls'=>'wells','wells'=>'wells',
            'well'=>'well','ways'=>'ways','way'=>'way','wall'=>'wall','walks'=>'walks','walk'=>'walk','vws'=>'views','vw'=>'view',
            'vsta'=>'vista','vst'=>'vista','vlys'=>'valleys','vly'=>'valley','vlly'=>'valley','vlgs'=>'villages','vlg'=>'village',
            'vl'=>'ville','vista'=>'vista','vist'=>'vista','vis'=>'vista','villiage'=>'village','villg'=>'village','ville'=>'ville',
            'villages'=>'villages','village'=>'village','villag'=>'village','vill'=>'village','views'=>'views','view'=>'view',
            'viaduct'=>'viaduct','viadct'=>'viaduct','via'=>'viaduct','vdct'=>'viaduct','vally'=>'valley','valleys'=>'valleys',
            'valley'=>'valley','unions'=>'unions','union'=>'union','underpass'=>'underpass','un'=>'union','turnpk'=>'turnpike',
            'turnpike'=>'turnpike','tunnl'=>'tunnel','tunnels'=>'tunnel','tunnel'=>'tunnel','tunls'=>'tunnel','tunl'=>'tunnel',
            'tunel'=>'tunnel','trnpk'=>'turnpike','trls'=>'trail','trlrs'=>'trailer','trlr'=>'trailer','trl'=>'trail',
            'trks'=>'track','trk'=>'track','trce'=>'trace','trak'=>'track','trails'=>'trail','trailer'=>'trailer','trail'=>'trail',
            'trafficway'=>'trafficway','tracks'=>'track','track'=>'track','traces'=>'trace','trace'=>'trace',
            'throughway'=>'throughway','terrace'=>'terrace','terr'=>'terrace','ter'=>'terrace','summit'=>'summit',
            'sumitt'=>'summit','sumit'=>'summit','strvnue'=>'stravenue','strvn'=>'stravenue','strt'=>'street','strm'=>'stream',
            'streme'=>'stream','streets'=>'streets','street'=>'street','stream'=>'stream','stravn'=>'stravenue',
            'stravenue'=>'stravenue','straven'=>'stravenue','strav'=>'stravenue','stra'=>'stravenue','str'=>'street',
            'stn'=>'station','statn'=>'station','station'=>'station','sta'=>'station','st'=>'street','squares'=>'squares',
            'square'=>'square','squ'=>'square','sqrs'=>'squares','sqre'=>'square','sqr'=>'square','sq'=>'square','spurs'=>'spurs',
            'spur'=>'spur','sprngs'=>'springs','sprng'=>'spring','springs'=>'springs','spring'=>'spring','spngs'=>'springs',
            'spng'=>'spring','spgs'=>'springs','spg'=>'spring','smt'=>'summit','skyway'=>'skyway','shrs'=>'shores','shr'=>'shore',
            'shores'=>'shores','shore'=>'shore','shoars'=>'shores','shoar'=>'shore','shoals'=>'shoals','shoal'=>'shoal',
            'shls'=>'shoals','shl'=>'shoal','rvr'=>'river','run'=>'run','rue'=>'rue','rst'=>'rest','rpds'=>'rapids','rpd'=>'rapid',
            'row'=>'row','route'=>'route','roads'=>'roads','road'=>'road','rnchs'=>'ranch','rnch'=>'ranch','rivr'=>'river',
            'river'=>'river','riv'=>'river','ridges'=>'ridges','ridge'=>'ridge','rest'=>'rest','rds'=>'roads','rdgs'=>'ridges',
            'rdge'=>'ridge','rdg'=>'ridge','rd'=>'road','rapids'=>'rapids','rapid'=>'rapid','ranches'=>'ranch','ranch'=>'ranch',
            'ramp'=>'ramp','radl'=>'radial','radiel'=>'radial','radial'=>'radial','rad'=>'radial','pts'=>'points','pt'=>'point',
            'prts'=>'ports','prt'=>'port','prr'=>'prairie','prk'=>'park','prairie'=>'prairie','pr'=>'prairie','ports'=>'ports',
            'port'=>'port','points'=>'points','point'=>'point','pnes'=>'pines','plza'=>'plaza','plz'=>'plaza','plns'=>'plains',
            'pln'=>'plain','plaza'=>'plaza','plains'=>'plains','plain'=>'plain','pl'=>'place','pky'=>'parkway','pkwys'=>'parkways',
            'pkwy'=>'parkway','pkway'=>'parkway','pines'=>'pines','pine'=>'pine','pikes'=>'pike','pike'=>'pike','paths'=>'path',
            'path'=>'path','passage'=>'passage','pass'=>'pass','parkwy'=>'parkway','parkways'=>'parkways','parkway'=>'parkway',
            'parks'=>'parks','park'=>'park','ovl'=>'oval','overpass'=>'overpass','oval'=>'oval','orchrd'=>'orchard','orchard'=>
            'orchard','orch'=>'orchard','neck'=>'neck','nck'=>'neck','mtn'=>'mountain','mtin'=>'mountain','mt'=>'mount',
            'mssn'=>'mission','mountin'=>'mountain','mountains'=>'mountains','mountain'=>'mountain','mount'=>'mount',
            'motorway'=>'motorway','mntns'=>'mountains','mntn'=>'mountain','mntain'=>'mountain','mnt'=>'mount','mnrs'=>'manors',
            'mnr'=>'manor','missn'=>'mission','mills'=>'mills','mill'=>'mill','mews'=>'mews','medows'=>'meadows','meadows'=>'meadows',
            'meadow'=>'meadow','mdws'=>'meadows','mdw'=>'meadows','manors'=>'manors','manor'=>'manor','mall'=>'mall','loops'=>'loop',
            'loop'=>'loop','lodge'=>'lodge','lodg'=>'lodge','locks'=>'locks','lock'=>'lock','loaf'=>'loaf','lndng'=>'landing',
            'lndg'=>'landing','ln'=>'lane','lks'=>'lakes','lk'=>'lake','lights'=>'lights','light'=>'light','lgt'=>'light',
            'lf'=>'loaf','ldge'=>'lodge','ldg'=>'lodge','lcks'=>'locks','lck'=>'lock','lane'=>'lane','landing'=>'landing',
            'land'=>'land','lakes'=>'lakes','lake'=>'lake','kys'=>'keys','ky'=>'key','knolls'=>'knolls','knoll'=>'knoll',
            'knol'=>'knoll','knls'=>'knolls','knl'=>'knoll','keys'=>'keys','key'=>'key','juncton'=>'junction','junctn'=>'junction',
            'junctions'=>'junctions','junction'=>'junction','jcts'=>'junctions','jctns'=>'junctions','jctn'=>'junction',
            'jction'=>'junction','jct'=>'junction','iss'=>'islands','islnds'=>'islands','islnd'=>'island','isles'=>'isle',
            'isle'=>'isle','islands'=>'islands','island'=>'island','is'=>'island','inlt'=>'inlet','hwy'=>'highway','hway'=>'highway',
            'hvn'=>'haven','hts'=>'heights','ht'=>'heights','hrbor'=>'harbor','holws'=>'hollow','holw'=>'hollow',
            'hollows'=>'hollow','hollow'=>'hollow','hls'=>'hills','hllw'=>'hollow','hl'=>'hill','hiwy'=>'highway',
            'hiway'=>'highway','hills'=>'hills','hill'=>'hill','highwy'=>'highway','highway'=>'highway','hbr'=>'harbor',
            'haven'=>'haven','harbr'=>'harbor','harbors'=>'harbors','harbor'=>'harbor','harb'=>'harbor','gtwy'=>'gateway',
            'gtway'=>'gateway','grv'=>'grove','groves'=>'groves','grove'=>'grove','grov'=>'grove','grn'=>'green','greens'=>'greens',
            'green'=>'green','grdns'=>'gardens','grdn'=>'garden','grden'=>'garden','gln'=>'glen','glens'=>'glens','glen'=>'glen',
            'gdns'=>'gardens','gatway'=>'gateway','gatewy'=>'gateway','gateway'=>'gateway','gardn'=>'garden','gardens'=>'gardens',
            'garden'=>'garden','fwy'=>'freeway','ft'=>'fort','fry'=>'ferry','frwy'=>'freeway','frway'=>'freeway','frt'=>'fort',
            'frst'=>'forest','frry'=>'ferry','frks'=>'forks','frk'=>'fork','frg'=>'forge','freewy'=>'freeway','freeway'=>'freeway',
            'frd'=>'ford','fort'=>'fort','forks'=>'forks','fork'=>'fork','forges'=>'forges','forge'=>'forge','forg'=>'forge',
            'forests'=>'forest','forest'=>'forest','fords'=>'fords','ford'=>'ford','flts'=>'flats','flt'=>'flat','fls'=>'falls',
            'flds'=>'fields','fld'=>'field','flats'=>'flats','flat'=>'flat','fields'=>'fields','field'=>'field','ferry'=>'ferry',
            'falls'=>'falls','fall'=>'fall','exts'=>'extensions','extnsn'=>'extension','extn'=>'extension','extension'=>'extension',
            'ext'=>'extension','expy'=>'expressway','expw'=>'expressway','expressway'=>'expressway','express'=>'expressway',
            'expr'=>'expressway','exp'=>'expressway','ests'=>'estates','estates'=>'estates','estate'=>'estate','est'=>'estate',
            'dvd'=>'divide','dv'=>'divide','drv'=>'drive','drives'=>'drives ','drive'=>'drive','driv'=>'drive','dr'=>'drive',
            'dm '=>'dam','dl '=>'dale','divide'=>'divide','div'=>'divide','dam '=>'dam','dale '=>'dale','cv'=>'cove',
            'curve '=>'curve ','cts'=>'courts','ctr'=>'center','ct'=>'court','cswy'=>'causeway','crssng '=>'crossing',
            'crsnt'=>'crescent','crsent'=>'crescent','crse'=>'course','crossroads'=>'crossroads','crossroad'=>'crossroad',
            'crossing '=>'crossing','crk'=>'creek','crest'=>'crest','crescent'=>'crescent','cres'=>'crescent','creek'=>'creek',
            'crcle'=>'circle','crcl'=>'circle','cpe'=>'cape','cp'=>'camp','coves'=>'coves','cove'=>'cove','courts'=>'courts',
            'court'=>'court','course'=>'course','cors'=>'corners','corners'=>'corners','corner'=>'corner','cor'=>'corner',
            'commons'=>'commons','common'=>'common','cnyn'=>'canyon','cntr'=>'center','cnter'=>'center','cmp'=>'camp','club'=>'club',
            'cliffs'=>'cliffs','cliff'=>'cliff','clfs'=>'cliffs','clf'=>'cliff','clb'=>'club','circles'=>'circles','circle'=>'circle',
            'circl'=>'circle','circ'=>'circle','cir'=>'circle','centre'=>'center','centr'=>'center','centers '=>'centers',
            'center'=>'center','cent'=>'center','cen'=>'center','causwa'=>'causeway','causeway'=>'causeway','cape'=>'cape',
            'canyon'=>'canyon','canyn'=>'canyon','camp'=>'camp','byps'=>'bypass','bypass'=>'bypass','bypas'=>'bypass','bypa'=>'bypass',
            'byp'=>'bypass','burgs'=>'burgs','burg'=>'burg','btm'=>'bottom','brooks '=>'brooks','brook'=>'brook','brnch'=>'branch',
            'brk'=>'brook','bridge'=>'bridge','brg'=>'bridge','brdge'=>'bridge','branch'=>'branch','br'=>'branch','boulv'=>'boulevard',
            'boulevard '=>'boulevard','boul'=>'boulevard','bottom'=>'bottom','bottm'=>'bottom','bot'=>'bottom','bnd'=>'bend',
            'blvd'=>'boulevard','bluffs '=>'bluffs','bluff'=>'bluff','bluf'=>'bluff','blf'=>'bluff','bend'=>'bend','beach'=>'beach',
            'bch'=>'beach','bayou'=>'bayou','bayoo'=>'bayou','avnue'=>'avenue','avn'=>'avenue','avenue'=>'avenue','avenu'=>'avenue',
            'aven'=>'avenue','ave'=>'avenue','av'=>'avenue','arcade '=>'arcade','arc '=>'arcade','anx'=>'anex','annx'=>'anex',
            'annex'=>'anex','anex'=>'anex','aly'=>'alley','ally'=>'alley','alley'=>'alley','allee'=>'alley'};
        
        // Lowercase everything     
        String streetAddress = street.toLowerCase();
        String projectName = projName.toLowerCase();
        String cityName = city.toLowerCase();
        String stateName = state.toLowerCase();
        
        
        // Remove abbreviations, non-alphanumeric characters
		Pattern nonAlphanumeric = Pattern.compile('[^a-zA-Z0-9 ]');
        String cleanStreetAddress = nonAlphanumeric.matcher(streetAddress).replaceAll('');  
        String cleanProjectName = nonAlphanumeric.matcher(projectName).replaceAll('');
        String cleanCityName = nonAlphanumeric.matcher(cityName).replaceAll('');
        String cleanStateName = nonAlphanumeric.matcher(stateName).replaceAll('');
        
        // Split and then keep only portions of each string
        List<string> splitStreetAddress = cleanStreetAddress.split(' ', 0);
        List<string> splitProjectName = cleanProjectName.split(' ',0);
        List<string> splitCityName = cleanCityName.split(' ',0);
        List<string> splitStateName = cleanStateName.split(' ',0);
                
        //iterate over lists of items in each name, remove abbreviations, 
        //and select only a portion of each name
          
        //iterate over the list of lists
        //depending on which iteration we are on select the appropriate characters, items
        //
        
        List<List<String>> nameList = new List<List<String>>();
        nameList.add(splitStreetAddress);
        nameList.add(splitProjectName);
        nameList.add(splitCityName);
        nameList.add(splitStateName);        
        
        List<string> keptWords = new List<string>();
        
        integer listSize = nameList.size();
        for(integer i=0, j=0; i<listSize;i++){
            integer subListSize = nameList[i].size(); 
            integer addressCounter = 0;
            integer projectNameCounter = 0;
            integer cityCounter = 0;
            for(integer n=0,p=0;n<subListSize;n++){
                //if i==1 (or looking at splitStreetAddress) then only winnow out 
                //all abbreviations and keep just first five characters
                if(i==0){
                    if(!stopWords.containsKey(splitStreetAddress.get(n))){
                        if(addressCounter<2){
                            addressCounter = addressCounter +1;
                            keptWords.add(splitStreetAddress.get(n).left(5));
                        }
                    } 
                }
                // splitProjectName
                if(i==1){
                    if(!stopWords.containsKey(splitProjectName.get(n))){
                        if(projectNameCounter<2){
                            projectNameCounter = projectNameCounter + 1;
                            keptWords.add(splitProjectName.get(n).left(6));
                        }
                    }
                }
                // splitCityName
                if(i==2){
                    if(!stopWords.containsKey(splitCityName.get(n))){
                        if(cityCounter<2){
                            cityCounter = cityCounter + 1;
                            keptWords.add(splitCityName.get(n).left(6));
                        }
                    }
                }
                // splitStateName
                if(i==3){
                    if(!stopWords.containsKey(splitStateName.get(n))){
                        if(n<2){
                            keptWords.add(splitStateName.get(n).left(2));
                        }
                    }
                }
            }
        }
        
       //concatenate all keptWords together
       //
       	integer keptWordListLength = keptWords.size();
        string levenString = '';
        for(integer i=0,j=0;i<keptWordListLength;i++){
            levenString = levenString + keptWords.get(i);
        }
        
        return levenString;	      
    } 
  
 /*   
    public static SERH_Data__C constructDataRecord(projectJSON2Apex.aProjectJSON2Apex bProject, planJson2Apex.aPlanJson2Apex rplan, analysisJson2Apex.pAnalysisJson2Apex bsIsAnalysisResults,  analysisJson2Apex.pAnalysisJson2Apex RefAnalysisResults,  analysisJson2Apex.pAnalysisJson2Apex DesAnalysisResults, String arecordType) {

        projectJSON2Apex.aProjectJSON2Apex qProject = bProject;
        planJson2Apex.aPlanJson2Apex qplan = rplan;
        analysisJson2Apex.pAnalysisJson2Apex asIsAnalysisResults = bsIsAnalysisResults;
        analysisJson2Apex.pAnalysisJson2Apex referenceAnalysisResults = RefAnalysisResults;
        analysisJson2Apex.pAnalysisJson2Apex designAnalysisResults = DesAnalysisResults;
        String recordType = arecordType;
        Date EC_Registration_Date = Date.newInstance(1999, 1, 1);
        Date Rating_Date = Date.newInstance(1999, 1, 1);
        string masterPlan = null;


        if(arecordType == 'HERS'){
            masterPlan = qProject.MasterPlanId;
        }
        else{
            masterPlan = null;
        }

        Double naturalGas = 0;
        Double electric = 0;
        Double oil = 0;
        Double propane = 0;
        Double wood = 0;

         if (qProject.hersRatingDetails.ratingDate != null){
                EC_Registration_Date =  Date.newInstance(
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.ratingDate).substring(0,4)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.ratingDate).substring(5,7)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.ratingDate).substring(8,10)));
            }else{
                EC_Registration_Date = null;
            }
            if (qProject.hersRatingDetails.fieldRatingDate != null){
               Rating_Date = Date.newInstance(
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.fieldRatingDate).substring(0,4)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.fieldRatingDate).substring(5,7)),
                    Integer.valueOf(String.valueOf(qProject.hersRatingDetails.fieldRatingDate).substring(8,10)));
            }else{
                Rating_Date = null;
            }



        //iterate thru all compliance results
            //when it equals each one grab it and write it to the appropriate
            //fields. but how do i iterate throur a

        integer i = AsIsAnalysisResults.Compliance.size();
        integer count = 0;
        String iecc2009 = 'False';
        String iecc2012 = 'False';
        String energyStar = 'False';
        String doeZERH = 'False';
        String dukeHero= 'False';

        while (count < i){
            List<string> codesToCheck = new List<string>();
            If (AsIsAnalysisResults.Compliance[count].code == 'IECC2009Performance'){
                iecc2009 = AsIsAnalysisResults.Compliance[count].complianceStatus;
            }
            If (AsIsAnalysisResults.Compliance[count].code == 'EnergyStarV3'){
                energyStar = AsIsAnalysisResults.Compliance[count].complianceStatus;
            }
            If (AsIsAnalysisResults.Compliance[count].code == 'IECC2012Performance'){
                iecc2012 = AsIsAnalysisResults.Compliance[count].complianceStatus;
            }
            If (AsIsAnalysisResults.Compliance[count].code == 'DOEZeroEnergyReady'){
                doeZERH = AsIsAnalysisResults.Compliance[count].complianceStatus;
            }
            If (AsIsAnalysisResults.Compliance[count].code == 'DukeNCHEROPerformance'){
                dukeHero = AsIsAnalysisResults.Compliance[count].complianceStatus;
            }
            count++;
        }

         Integer fee = 60;

        if(qProject.hersRatingDetails.rater.RatingCompany.id == 'JVYyEeYW'){
            fee = 55;
        } else if(qProject.hersRatingDetails.ratingType == 'Sampled'){
			fee = 30;
        } else if(qProject.name.containsIgnoreCase('repeat') && energyStar == 'PASS'){//qProject.name.containsIgnoreCase('estar')){
            fee = 50;
        } else if(qProject.name.containsIgnoreCase('repeat') && energyStar != 'PASS'){//!qProject.name.containsIgnoreCase('estar')){
            fee = 45;
        } else if(!qProject.name.containsIgnoreCase('repeat') && energyStar == 'PASS'){//qProject.name.containsIgnoreCase('estar')){
            fee = 65;
        } else{
            fee = 60;
        }

        //asIsAnalysisResults

        system.debug(qProject.name+'-'+fee);


        SERH_Data__c serhRecord = new SERH_Data__c(

            name = recordType + '-' + qProject.name.abbreviate(79-recordType.length()),
            Registry_ID__c = qProject.hersRatingDetails.registryId,
            Rating_Date__c = Rating_Date,
            Registered_Date__c = EC_Registration_Date,
            Upload_Date__c = Date.today(),
            of_Units__c = 1.0,
            Project_Type__c = qplan.Details.residenceType,
            Foundation_Type__c = qplan.thermalEnvelope.foundationType,
            Housing_Type__c = qplan.Details.residenceType,

            ENERGY_STAR_v3__c = energyStar,
            ZERH__c = doeZERH,
            IECC2009_UA__c = iecc2009,
            IECC2012_UA__c = iecc2012,

            //Rating_Type__c = not sure where this is in api,
            Software_Version__c = 'Ekotrope-'+qProject.algorithmVersion,
            //Building_Name__c =
            Rating_Type__c = qProject.hersRatingDetails.ratingType,
            File_Name__c = qProject.name.abbreviate(80),
            Plan_Name__c = qProject.model,
            Ekotrope_Plan_ID__c = masterPlan,
            HERS_INDEX__c =  AsIsAnalysisResults.hersScore,
            CFA_sqft__c = qplan.thermalEnvelope.summary.conditionedArea,
            Volume_cuft__c = qplan.thermalEnvelope.summary.conditionedVolume,
            BD_Infiltration_Cool__c = qplan.thermalEnvelope.infiltration.cfm50,
            BD_Infiltration_Heat__c = qplan.thermalEnvelope.infiltration.cfm50,
            Invoice_for__c = 'File QA',
            Fee_per_Unit__c = fee,
            Export_Type__c = recordType,
            BD_Infiltration_Units__c = 'cfm50',
            OwnerId = '005U0000000cZ8eIAE',
            CO2_lbs__c = AsIsAnalysisResults.emissions.summary.totalCo2,
            NOX_lbs__c = AsIsAnalysisResults.emissions.summary.totalNox,
            SO2_lbs__c = AsIsAnalysisResults.emissions.summary.totalSo2,
            Cooling_MMBtu__c = AsIsAnalysisResults.energy.summary.coolingConsumption,
            Heating_MMBtu__c = AsIsAnalysisResults.energy.summary.heatingConsumption,
            DHW_MMBtu__c = AsIsAnalysisResults.energy.summary.waterHeatingConsumption,
            PV_MMBtu__c = AsIsAnalysisResults.energy.summary.solarGeneration,
            LA_MMBtu__c = AsIsAnalysisResults.energy.summary.lightingAndAppliancesConsumption,
            Total_Rated_Consumption_MMBtu__c = AsIsAnalysisResults.energy.summary.coolingConsumption +
            AsIsAnalysisResults.energy.summary.heatingConsumption +
            AsIsAnalysisResults.energy.summary.waterHeatingConsumption +
            AsIsAnalysisResults.energy.summary.lightingAndAppliancesConsumption,

            Electricity_Consumption_kWh__c = 293.07 * (AsIsAnalysisResults.energy.breakdown.byFuel[1].coolingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[1].heatingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[1].lightingAndAppliancesConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[1].waterHeatingConsumption),

            Fuel_Oil_Consumption_gallons__c = 7.22 * (AsIsAnalysisResults.energy.breakdown.byFuel[2].coolingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[2].heatingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[2].lightingAndAppliancesConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[2].waterHeatingConsumption),

            Natural_Gas_Consumption_therms__c = 10 * (AsIsAnalysisResults.energy.breakdown.byFuel[0].coolingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[0].heatingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[0].lightingAndAppliancesConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[0].waterHeatingConsumption),

            Propane_Consumption_gallons__c = 10.95 *(AsIsAnalysisResults.energy.breakdown.byFuel[3].coolingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[3].heatingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[3].lightingAndAppliancesConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[3].waterHeatingConsumption),

            Wood_Consumption_tonnes__c = 0.067 * (AsIsAnalysisResults.energy.breakdown.byFuel[4].coolingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[4].heatingConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[4].lightingAndAppliancesConsumption+
            AsIsAnalysisResults.energy.breakdown.byFuel[4].waterHeatingConsumption),


            Ref_CO2_Lbs__c = referenceAnalysisResults.emissions.summary.totalCo2,
            Ref_NOX_lbs__C = referenceAnalysisResults.emissions.summary.totalNox,
            Ref_SO2_lbs__C = referenceAnalysisResults.emissions.summary.totalSo2,

            Ref_Cooling_MMBtu__c = referenceAnalysisResults.energy.summary.coolingConsumption,
            Ref_Heating_MMBtu__c = referenceAnalysisResults.energy.summary.heatingConsumption,
            Ref_DHW_MMBtu__c = referenceAnalysisResults.energy.summary.waterHeatingConsumption,
            Ref_PV_MMBtu__c = referenceAnalysisResults.energy.summary.solarGeneration,
            Ref_LA_MMBtu__c = referenceAnalysisResults.energy.summary.lightingAndAppliancesConsumption,
            Ref_Total_Rated_Consumption_MMBtu__c = referenceAnalysisResults.energy.summary.coolingConsumption +
            referenceAnalysisResults.energy.summary.heatingConsumption +
            referenceAnalysisResults.energy.summary.waterHeatingConsumption +
            referenceAnalysisResults.energy.summary.lightingAndAppliancesConsumption,

            Ref_Electricity_Consumption_kWh__c = 293.07 * (referenceAnalysisResults.energy.breakdown.byFuel[1].coolingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[1].heatingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[1].lightingAndAppliancesConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[1].waterHeatingConsumption),

            Ref_Fuel_Oil_Consumption_gallons__c = 7.22 * (referenceAnalysisResults.energy.breakdown.byFuel[2].coolingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[2].heatingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[2].lightingAndAppliancesConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[2].waterHeatingConsumption),

            Ref_Natural_Gas_Consumption_therm__c = 10 * (referenceAnalysisResults.energy.breakdown.byFuel[0].coolingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[0].heatingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[0].lightingAndAppliancesConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[0].waterHeatingConsumption),

            Ref_Propane_Consumption_gallons__c = 10.95 *(referenceAnalysisResults.energy.breakdown.byFuel[3].coolingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[3].heatingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[3].lightingAndAppliancesConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[3].waterHeatingConsumption),

            Ref_Wood_Consumption_tonnes__c = 0.067 * (referenceAnalysisResults.energy.breakdown.byFuel[4].coolingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[4].heatingConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[4].lightingAndAppliancesConsumption+
            referenceAnalysisResults.energy.breakdown.byFuel[4].waterHeatingConsumption),

            Design_CO2_Lbs__c = designAnalysisResults.emissions.summary.totalCo2,
            Design_NOX_lbs__C = designAnalysisResults.emissions.summary.totalNox,
            Design_SO2_lbs__C = designAnalysisResults.emissions.summary.totalSo2,

            Design_Cooling_MMBtu__c = designAnalysisResults.energy.summary.coolingConsumption,
            Design_Heating_MMBtu__c = designAnalysisResults.energy.summary.heatingConsumption,
            Design_DHW_MMBtu__c = designAnalysisResults.energy.summary.waterHeatingConsumption,
            Design_PV_MMBtu__c = designAnalysisResults.energy.summary.solarGeneration,
            Design_LA_MMBtu__c = designAnalysisResults.energy.summary.lightingAndAppliancesConsumption,
            Design_Total_Rated_Consumption_MMBtu__c = designAnalysisResults.energy.summary.coolingConsumption +
            designAnalysisResults.energy.summary.heatingConsumption +
            designAnalysisResults.energy.summary.waterHeatingConsumption +
            designAnalysisResults.energy.summary.lightingAndAppliancesConsumption,

            Design_Electricity_Consumption_kWh__c = 293.07 * (designAnalysisResults.energy.breakdown.byFuel[1].coolingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[1].heatingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[1].lightingAndAppliancesConsumption+
            designAnalysisResults.energy.breakdown.byFuel[1].waterHeatingConsumption),

            Design_Fuel_Oil_Consumption_gallons__c = 7.22 * (designAnalysisResults.energy.breakdown.byFuel[2].coolingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[2].heatingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[2].lightingAndAppliancesConsumption+
            designAnalysisResults.energy.breakdown.byFuel[2].waterHeatingConsumption),

            Design_Natural_Gas_Consumption_therm__c = 10 * (designAnalysisResults.energy.breakdown.byFuel[0].coolingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[0].heatingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[0].lightingAndAppliancesConsumption+
            designAnalysisResults.energy.breakdown.byFuel[0].waterHeatingConsumption),

            Design_Propane_Consumption_gallons__c = 10.95 *(designAnalysisResults.energy.breakdown.byFuel[3].coolingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[3].heatingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[3].lightingAndAppliancesConsumption+
            designAnalysisResults.energy.breakdown.byFuel[3].waterHeatingConsumption),

            Design_Wood_Consumption_tonnes__c = 0.067 * (designAnalysisResults.energy.breakdown.byFuel[4].coolingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[4].heatingConsumption+
            designAnalysisResults.energy.breakdown.byFuel[4].lightingAndAppliancesConsumption+
            designAnalysisResults.energy.breakdown.byFuel[4].waterHeatingConsumption)
        );
        return serhRecord;
    }

   
    
    public static string setProjectStatus(projectJSON2Apex.aProjectJSON2Apex bProject, planJson2Apex.aPlanJson2Apex rplan, String updateStatus, String initialStatus){
        //Set project status, assigns the appropriate status dependent on
    	//the rating type, building type, and previous status
        projectJSON2Apex.aProjectJSON2Apex qProject = bProject;
        planJson2Apex.aPlanJson2Apex qplan = rPlan;
        string projectStatus;

        string projectType = rPlan.Details.residenceType;
        string ratingType = bProject.hersRatingDetails.ratingType;
        if(projectType == 'ApartmentEndUnit' || projectType == 'ApartmentInsideUnit'
           || projectType == 'MultiFamilyWholeBuilding' || projectType == 'DuplexSingleUnit'
           || projectType == 'DuplexWholeBuilding'|| ratingType == 'Sampled'
           || ratingType == 'Threshold'|| ratingType == 'Projected'){
               projectStatus = 'On Hold';
           }
        else{
            projectStatus = 'In Progress';
        }

        return projectStatus;
    }

    public static void determineQaNeed(List<string> projectIds){
        //This takes a list of project IDs and determines if any should
    	//be selected for File QA. This is based on need.
        // This determines the files that need File QA.

        String year;
        year = String.valueOf(datetime.now().year());

        Map<id, boolean> idMap = new Map<id, boolean>();
             for(Qualifications_del__c autoUploadStatus : [Select Approved_for_Auto_Upload__c, id, Qualifications_for__c
                                            From Qualifications_del__c
                                            ])
            {idMap.put(autoUploadStatus.Qualifications_for__c, autoUploadStatus.Approved_for_Auto_Upload__c);}


        //iterate thru list
        //we could sort by HERS Rater and then economize on the QA need SOQL queries. 
        //However, we generally are working with few files at a time. But it would 
        //speed up all of the Ensign/Matt Wall file process - a majority of the work we do.
        for(string projectId : projectIds){
            //get project with soql
             Project__c projectRecord;
             projectRecord = [SELECT HERS_Rater__c, Rating_Field_Inspector__c,
                              Project_Status__c, ID, Energy_STAR_v3__c,
                              Ekotrope_ID__c, Name
                              FROM Project__c WHERE Ekotrope_ID__c = :projectId];
             id hersRater = projectRecord.HERS_Rater__c;


            system.debug(projectRecord.Name);



            //determine if the project is estar: if true then preform separate coin flip.
            if(projectRecord.Energy_Star_v3__c == 'Pass'){
                Integer eStarFiles =  [select count()
                    from project__c
                    Where HERS_Rater__c = :hersRater and ((EC_Registration_Date__c = THIS_YEAR
                        and Energy_Star_v3__c = 'Pass'
                        and recordtypeid = '0120B000000t8JVQAY')

                    or (recordtypeid = '0120B000000t8JVQAY'
                        and Energy_Star_v3__c = 'Pass'
                        and Project_Status__c = 'pending review'
                        and EC_Registration_Date__c = Null)

                    or (recordtypeid = '0120B000000t8JVQAY'
                        and Energy_Star_v3__c = 'Pass'
                        and Project_Status__c = 'in progress'
                        and EC_Registration_Date__c = Null))
                    ];

                Integer eStarFileQA = [select count()
                    from inspections__c
                    Where QA_Year_SERH__c = :year
                    and Energy_Star__c = TRUE
                    and recordTypeID = '0120B0000005kLZQAY'
                    and HERS_Rater_Name_SERH__c = :hersRater];
                Double TotaleStarQaNeed = Math.ceil(double.valueOf(eStarFiles)/10);

                if(eStarFileQA == 0){
                    Inspections__c newInspection = ekotropeSync.constructInspectionRecord(projectRecord.Id);
                    insert newInspection;
                } else if(math.random() > 0.5) {
                    //flip coin
                    system.debug('First Coin Flip was greater than 0.5');
                	Double eStarFileQaLeft = TotaleStarQaNeed - eStarFileQa;
                    //if eStarFileQaLeft > 0 == TRUE then we can create a QA
                    if(eStarFileQaLeft >= 0){
                        Inspections__c newInspection = ekotropeSync.constructInspectionRecord(projectRecord.Id);
                        insert newInspection;
                        projectRecord.Project_Status__c = 'Pending Review';
                        update projectRecord;
                    }
                }
            }

            Integer regFiles =  [select count()
                                       from project__c
                                       Where HERS_Rater__c = :hersRater
                                       and
                                             ((EC_Registration_Date__c = THIS_YEAR
                                               and recordtypeid = '0120B000000t8JVQAY')

                                           or (recordtypeid = '0120B000000t8JVQAY'
                                                and Project_Status__c = 'pending review'
                                                and EC_Registration_Date__c = Null)

                                            or (recordtypeid = '0120B000000t8JVQAY'
                                                and Project_Status__c = 'in progress'
                                                and EC_Registration_Date__c = Null))
                                      ];

            Integer regFileQA = [select count()
                                              from inspections__c
                                              Where QA_Year_SERH__c = :year// year = String.valueOf(datetime.now().year());
                                              and recordTypeID = '0120B0000005kLZQAY'
                                              and HERS_Rater_Name_SERH__c = :hersRater];

            if(regFileQA == 0){
                Inspections__c newInspection = ekotropeSync.constructInspectionRecord(projectRecord.Id);
                insert newInspection;
                projectRecord.Project_Status__c = 'Pending Review';
            } else if(math.random() < 0.5)
            {
                //This file was not needed for estar or regular file qa: upload to building registry
                //Make sure they have the auto-upload field activated
                system.debug(idMap.get(projectRecord.HERS_Rater__c));
                system.debug(idMap.get(projectRecord.Rating_Field_Inspector__c));
                boolean rater;
                boolean rfi;
                if(idMap.get(projectRecord.HERS_Rater__c) == null){
                    rater = false;
                } else{
                    rater = idMap.get(projectRecord.HERS_Rater__c);
                }

                if(idMap.get(projectRecord.Rating_Field_Inspector__c) == null){
                    rfi = false;
                } else{
                    rfi = idMap.get(projectRecord.Rating_Field_Inspector__c);
                }
                if(rater && rfi){
                    projectRecord.Project_Status__c = 'In Progress';
                    update projectRecord;
                }
                else{
                    //Not approved for autoProcess
                    //place the project on hold
                    //Will know that the project is 'On Hold' due to not approved for autoProcess
                    //when we write the wrapper class that queries the rater/rfi credential
                    projectRecord.Project_Status__c = 'On Hold';
                    update projectRecord;

                }
            }
            else{
                system.debug('Second coin flip was greater than 0.5');
                //This file was randomly selected for regular file qa: determine if they need QA
                Double TotalFileQaNeed = Math.ceil(double.valueOf(regFiles)/10);
                Double regFileQaLeft = TotalFileQaNeed - regFileQa;
                if(regFileQaLeft >= 0){
                    Inspections__c newInspection = ekotropeSync.constructInspectionRecord(projectRecord.Id);
                    insert newInspection;
                    projectRecord.Project_Status__c = 'Pending Review';
                }
                else{
                    projectRecord.Project_Status__c = 'In Progress';
                }
                update projectRecord;
            }
        }
    }



    */
   
    public static HttpResponse getProjectList(String authorization, String statusType){
        //Get list of projects from ekotrope that have stage: statusType
        //    -statusType options are: Registered with Resnet, Submitted for QA, Shared with Provider, unregistered
        //    -This queries ekotrope for a project list
        //    -If no response or api call errors it returns a httpResponse with an error code to be processed later
        //
        
        if(test.isRunningTest()){
                    Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpProjListCallout());
                }
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HttpResponse response;
        request.setEndpoint('https://api.ekotrope.com/api/v1/projects?status='+statusType);//SUBMITTED_TO_REGISTRY');
        request.setMethod('GET');
        request.setHeader('authorization', authorization);
        request.setTimeout(60000);
        try {
			system.debug('trying to get response from get project list');
            response = http.send(request);
            } 
        catch(Exception e) {
            system.debug('getProjectList except');
            system.debug(e.getMessage());
            response = new HttpResponse();
            response.setStatus(e.getMessage());
            response.setStatusCode(418);
            response.setBody('{}');
            system.debug(response);
        }
        
        return response;
   	}
 

	public static HttpResponse getProjectListWithDate(String authorization, String statusType, String createdAfter, String createdBefore){
        
        if(test.isRunningTest()){
                    Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpProjListCallout());
                }
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HttpResponse response;
        request.setEndpoint('https://api.ekotrope.com/api/v1/projects?status='+statusType+'&created_after='+createdAfter+'&created_before='+createdBefore);
        request.setMethod('GET');
        request.setHeader('authorization', authorization);
        request.setTimeout(60000);
        try {
			system.debug('trying to get response from get project list');
            response = http.send(request);
            } 
        catch(Exception e) {
            system.debug('getProjectList except');
            system.debug(e.getMessage());
            response = new HttpResponse();
            response.setStatus(e.getMessage());
            response.setStatusCode(418);
            response.setBody('{}');
            system.debug(response);
        }
        
        return response;
    }

    public static HttpResponse getProject(String authorization, String ekotropeId){
        String project = ekotropeId;
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HttpResponse projectResponse;
		request.setEndpoint('https://api.ekotrope.com/api/v1/projects/'+project);
		request.setMethod('GET');
		request.setHeader('authorization', authorization);
		
        try{
            projectResponse = http.send(request);
           
        } catch(Exception e){
            system.debug('getProject exception');
            system.debug(e.getMessage());
            projectResponse = new HttpResponse();
            projectResponse.setStatus(e.getMessage());
            projectResponse.setStatusCode(418);
            projectResponse.setBody('{}');
            
            
        }
        return projectResponse;

    }

    public static HttpResponse getHousePlan(String authorization, String ekotropeMasterPlanId){
        String planID = ekotropeMasterPlanId;
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HttpResponse planResponse;
		request.setEndpoint('https://api.ekotrope.com/api/v1/houseplans/' + planID);
		request.setMethod('GET');
        request.setHeader('authorization', authorization);
        try{
            planResponse = http.send(request);
        } catch(Exception e){
            system.debug('getHousePlan except');
            system.debug(e.getMessage());
            planResponse = new HttpResponse();
            planResponse.setStatus(e.getMessage());
            planResponse.setStatusCode(418);
            planResponse.setBody('{}');
        }
		
        return planResponse;

    }

    public static HttpResponse getHousePlanAnalysis(String authorization, String ekotropeMasterPlanId, String buildingType, List<String> codesToCheck){
        String planID = ekotropeMasterPlanId;
        String building = buildingType;
        String codesString = '';
        for(String i : codesToCheck){
            codesString = codesString +'&codesToCheck=' + i;
        }
		system.debug(codesString);
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HttpResponse planAnalysisResponse;
        request.setEndpoint('https://api.ekotrope.com/api/v1/planAnalysis/'+planID+'?buildingType='+ buildingType + codesString);
		request.setMethod('GET');
		request.setHeader('authorization', authorization);
		
        try{
            planAnalysisResponse = http.send(request);
            
        } catch(Exception e){
            system.debug('getHousePlanAnalysis except');
            system.debug(e.getMessage());
            planAnalysisResponse = new HttpResponse();
            planAnalysisResponse.setStatus(e.getMessage());
            planAnalysisResponse.setStatusCode(418);
            planAnalysisResponse.setBody('{}');
           
        }
        return planAnalysisResponse;

    }
   
/*
    public static HttpResponse putToBuildingRegistry(String authorization, String ekotropeId){
        //make this a method which returns a Map<String, String>
        //This method should take an authorization and a list of project ids or ekotrope ids
        //It then uploads each individually and returns a status or does it handle the status internally
        //I think it handles the status internally and then it can just be a terminal function
        //Otherwise it takes one id at a time uploads and returns the response. That's pretty clean
        //
        //
        String planID = ekotropeId;
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HttpResponse putResponse;
        request.setEndpoint('https://api.ekotrope.com/api/v1/resnet/registeredProjects/'+planID);
        request.setMethod('PUT');
        request.setHeader('authorization', authorization);
        request.setTimeout(20000);
        try{
            putResponse = http.send(request);
            //return putResponse;
        } catch(Exception e){
            system.debug('putToBuildingRegistry except');
            system.debug(e.getMessage());
            putResponse = new HttpResponse();
            putResponse.setStatus(e.getMessage());
            putResponse.setStatusCode(418);
            putResponse.setBody('{}');
            String json = '{\"registryId\":\"null\",\"rawRegistryResponse\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<RegistryResponse>\\r\\n  <ResponseCode>null</ResponseCode>\\r\\n  <ResponseMessage><![CDATA[Rating imported unsuccessfully!]]></ResponseMessage>\\r\\n  <RegistryID>null</RegistryID>\\r\\n</RegistryResponse>\",\"automaticQaStatus\":\"null\"}';
            system.debug(putResponse);
			//return putResponse;
        }
        return putResponse;
    }

*/
    
     public static Log__c constructErrorLog(String nameString, String apexClass, HttpResponse newHTTP, String projectId, String descriptionLong){
        Log__c errorLog = new Log__c(
            Name = nameString,
            Status_Code__c = string.valueOf(newHTTP.getStatusCode()),
            Class_Name__c = apexClass,
            Record_Id__c = projectId,
            Description__c = newHTTP.getStatus()
            //Description_long__c = descriptionLong
        );
        return errorLog;
    }
    
    global void setVariables(list<string> stage){
        //This sets which Ekotrope Status this code queries from the Project List API
    	//The options are: "SUBMITTED_FOR_QA", "SUBMITTED_TO_REGISTRY", "UNREGISTERED",
    	//"REGISTERED_WITH_PROVIDER"
        ekotropeStages = stage;
    }

    global void setRegRun(boolean regRun){
        //A regular run (TRUE) is a run in which we create projects and serh data with status
    	//HERS. If we want to make serh data that is not of status "HERS" the setNonRegRun
    	//should be set to FALSE.
        regularRun = regRun;
    }

    global void setAuthorization(){
        //A regular run (TRUE) is a run in which we create projects and serh data with status
    	//HERS. If we want to make serh data that is not of status "HERS" the setNonRegRun
    	//should be set to FALSE.
        //Authorization = auth;
        
        Account credentials = [Select id from Account WHERE Name = 'Southface'];//, Ekotrope_Password__c, Ekotrope_Username__c
        //system.debug(credentials.Ekotrope_Password__c);
        
        String username = 'placeholder';//credentials.Ekotrope_Username__c;
        String password = 'placeholder';//credentials.Ekotrope_Password__c;
        Blob headerValue = Blob.valueOf(username + ':' + password);
        authorization = ('Basic ' + EncodingUtil.base64Encode(headerValue));  
        
        system.debug(authorization);
    }

    global void setCodesToCheck(List<string> codes){
        //Sets codes which will be evaluated for compliance
    	//in the Ekotrope calculation engine.
        integer i = codes.size();
        integer beg = 0;
        while(beg < i){
            codesToCheck.add(codes[beg]);
            beg++;
        }
    }

    global void setBuildingRun(string baseline, string reference, string design){
        //The SERH Data object has fields to hold energy use data for three types of
        //home analysis. These results represent the three basic home energy evaluations
    	//for a HERS Rating - (HERS Index = ???? / Reference ; D)
        baselineBuilding = baseline;
        referenceBuilding = reference;
        designBuilding = design;
        buildingsToCheck.add(baseline);
        buildingsToCheck.add(reference);
        buildingsToCheck.add(design);
        }

    global void setEnergyDataName(string prefix){
        //This sets the SERH Data records Upload Type field. This should be
    	//descriptive of the setBuildingRun scenario. Current Salesforce field optoins are
    	//HERS, 2012 IECC, 2009 IECC
        dataPrefix = prefix;
        //System.Debug('Set prefix to '+prefix);
    }  
    
    global Iterable<String> start(Database.BatchableContext bc){
        List<Log__c> errorLogs = new List<Log__c>();
        
        //Get Unit_takeoffs that have an Ekotrope_ID. These should be all of the energy models
        //with existing connection to ekotrope because the Ekotrope_ID__c is filled in. 
        //On MF projects, this field is empty because viridiant puts in id on Ekotrope Model ID field
        //We will however, fill in this field on the MF-Shadow records which are treated the same as 
        //SF projects  - just like SERH
        //
        //
        //This gets SF and MF-Shadow that are already connected for the list to compare the Ekotrope Project List Results against
        for(Unit_Takeoff__c existingProject : [Select Ekotrope_ID__c, Ekotrope_selfOrPlanLastSavedAt__c, ID, Name   
                                            	FROM Unit_Takeoff__c
                                           		WHERE Ekotrope_ID__c != null]) //and RecordTypeId='??????????????????'
        {
            existingViridiantProjectsMap.put(existingProject.Ekotrope_ID__c, existingProject.Ekotrope_selfOrPlanLastSavedAt__c);       
        }
    
        //iterate through the requested ekotrope stages and query the getProjectList API endpoint
        //For each response, check to see if salesforce has the ekotrope project
        //if it does, check to see if needs to be updated. if it doesn't, add the project to database
        for(string ekoStage : ekotropeStages){
            if(test.isRunningTest()){Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpProjListCallout());}  
            HttpResponse projectListResponse = ekotropeSync.getProjectList(authorization, ekoStage);        
            if(projectListResponse.getStatusCode() == 200){
                String newProjectList = String.valueOf(projectListResponse.getBody());
                if(projectListResponse.getBody() != ''){
                    newResults = (List<Object>)JSON.deserializeUntyped(newProjectList);
                    //iterate over the projects in Ekotrope           
                    for(Object project : newResults){
                        Map<String, Object> projectData = (Map<String, Object>)project;
                        List<String> updateStatusList = new List<String>();
                        //Check to see if the project exists in existing Viridiant projects map (sf and mf-shadow) 
                        if(existingViridiantProjectsMap.get(String.valueOf(projectData.get('id')))==null){
                            //ekotrope id does not exist in salesforce. so we add it to the add list
                            //we do not know if it is sf or mf. We add the mf projects to the shadow data structure
                            globalProjectUpdateStatusList.put(String.valueOf(projectData.get('id')), 'create-project');
                            //projectIdList.add(String.valueOf(projectData.get('id')));    
                        } //If the id exists, then we check to see if it has changed
                        else {
                            if(projectData.get('selfOrPlanLastSavedAt') != existingViridiantProjectsMap.get(String.valueOf(projectData.get('id')))){
                                //projectIdList.add(String.valueOf(projectData.get('id'))); 
                                globalProjectUpdateStatusList.put(String.valueOf(projectData.get('id')), 'update-project');
                            }
                        }     
                    }
                } else{
                    system.debug('getProjectList returned a blank body');
                    if(!Test.isRunningTest()){
                        Log__c errorLog =  constructErrorLog('getProjectList', 'getProjectList', projectListResponse, ekoStage, projectListResponse.getBody());
                    	errorLogs.add(errorLog);
                    }
                }
            } else{
                system.debug('getProjectList returned a non-200 status');
                system.debug(projectListResponse.getBody());
                if(!Test.isRunningTest()){
                    Log__c errorLog = constructErrorLog('getProjectList','getProjectList', projectListResponse, ekoStage, projectListResponse.getBody());
                    errorLogs.add(errorLog);
                }
            } 
        }
 
        
        //I've gotten all of the new models and or models that need to be updated
        //next lets figure out what to do with them
        // We pass the ekoIds to execute. In execute the first thing that
        // happens is matching (after we determine MF, SF)
        
        projectIdList.addAll(globalProjectUpdateStatusList.keySet()); 
        
        //insert errorLogs;
        return projectIdList;
    }

    global void execute(Database.BatchableContext bc, List<String> projectsToUpdate){
        /*
         * first get all information for everything
         * Lots of work to be done here! 
         * Will need to build separate lists of projects to process based on the following: 
			- single family and multi-family
            - EarthCraft
            - Existing projects in salesforce
            - other programs??
		*/
        
        system.debug('ekotropeSync.execute Start: '+Limits.getCpuTime());
        
        
        List<Project__c> addProjects = new List<Project__c>();
        List<Log__c> errorLogs = new List<Log__c>();
        List<string> autoQaList = new List<string>();
        //List<Inspections__c> autoQaRecordList = new List<Inspections__c>();
        String raterId = null;
        String RFI_Rater = null;
        String project_status = null;
        
        /* 
         * Get all raters in Viridiant and their RESNET ID Number. This is to get correct File and Field QA
         * counts and to add correct contact information to each project
         * Change: 
			-This will query the Contact and not the Qualifications record 
		
        
            for(Qualifications_del__c existingContact : [
                Select Qualifications_for__c,
                HERS_RTIN_Rater_Identification_Number__c
                FROM Qualifications_del__c
                WHERE HERS_RTIN_Rater_Identification_Number__c != null ])
            {raterMap.put(existingContact.HERS_RTIN_Rater_Identification_Number__c, existingContact.Qualifications_for__c);}
                
                
            // Get all organizations or accounts that have an Ekotrope ID and put in Map. This is to assign correct
            // billing information
            for(Account existingAccounts : [Select Ekotrope_ID__c, Id FROM Account WHERE Ekotrope_ID__c != ''])
            {accountsMap.put(existingAccounts.Ekotrope_ID__c, existingAccounts.Id);}
		*/
        
        /*
         * Iterate thru all projects in projectsToUpdate list. For each project determine what needs to be done
         * Options: 
            - Ekotrope ID is in salesforce --> update project
            - Ekotrope ID is not in salesforce: 
                - SF: 
                    - Try to find it based on match algorithm:
                    - If we can find it then suggest match
                    - If we can't find it: then create new project  
                - MF: 
					- Create the project
					- might consider only grabbing Registered with Resnet projects
					- attempt to group
					
		*/
        
        //get all projects in salesforce that does not have an Ekotrope_ID__c and 
        //determine if any of them are likely mathces to the new projects
        //
        //can use projects for sf but for mf would want to use unit types --- this is onlyf
        //for sf 
        map<string, string> existingProjects = new map<string, string>();
        for(Project__c existingProject : [Select name, id, zip_code__c, state__c, 
                                          city__c, street_address__c   
                                            	FROM Project__c]) //and RecordTypeId='??????????????????'
        {
            String projName, street, city, state;
            projName = existingProject.name;
            street = existingProject.street_address__c;
            city = existingProject.city__c;
            state = existingProject.state__c;
            string lechString = normalizeLechString(projName, street, city, state);        
            existingProjects.put(existingProject.id, lechString);       
        }
        
        //normalizeLechString
        
        for(String projectId:projectsToUpdate){
            // first get all of the necessary information from ekotrope
            
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpProjectCallout() );}           
            HttpResponse projectResponse = ekotropeSync.getProject(authorization, projectId);
            system.debug(projectResponse.getBody());
            
            if(projectResponse.getStatusCode() == 418){
                system.debug('Project has status code 418: '+projectId);
                system.debug(projectResponse.getBody());
                Log__c errorLog = ekotropeSync.constructErrorLog('getProject','getProject', projectResponse, projectId, projectResponse.getBody());  
                errorLogs.add(errorLog);
            } else if(projectResponse.getStatusCode() == 200){
                String newProject = String.valueOf(projectResponse.getBody());
                projectJSON2Apex.aProjectJSON2Apex qProject = projectJSON2Apex.parse(newProject);

              
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpDesignCallout() ); }
                system.debug(qProject.masterPlanId);
                HttpResponse planResponse = ekotropeSync.getHousePlan(authorization, qProject.masterPlanId);  
                system.debug(planResponse.getBody());
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpAnalysisCallout() ); }
                HttpResponse analysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'EkotropeAsModeled', codesToCheck);
                system.debug(analysisResponse.getBody());
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpAnalysisCallout() ); }
                HttpResponse ReferenceAnalysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSReference', codesToCheck);
                system.debug(ReferenceAnalysisResponse.getBody());
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new ekotropeMockHttpAnalysisCallout() ); }
                HttpResponse DesignanalysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSRated', codesToCheck);
				system.debug(DesignanalysisResponse.getBody());
              
                //Complete the response parsing and record creation only if all HTTP callouts were successful
                if(planResponse.getStatusCode() == 200 && analysisResponse.getStatusCode() == 200 && ReferenceAnalysisResponse.getStatusCode() == 200 && DesignanalysisResponse.getStatusCode() == 200){
                    String plan = String.valueOf(planResponse.getBody());
                    planJson2Apex.aPlanJson2Apex qplan = planJson2Apex.parse(plan);
                    String AsIsAnalysis = String.valueOf(analysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex AsIsAnalysisResults = analysisJson2Apex.parse(AsIsAnalysis);                
                    String ReferenceAnalysis = String.valueOf(ReferenceAnalysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex ReferencenalysisResults = analysisJson2Apex.parse(ReferenceAnalysis);
                    String DesignAnalysis = String.valueOf(DesignanalysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex DesignAnalysisResults = analysisJson2Apex.parse(DesignAnalysis);
                    system.debug(Limits.getCpuTime());
                    
                    if(globalProjectUpdateStatusList.get(projectId) == 'update-project'){
                        // construct the records
                        // add them to an update list
                    } else{ 
                        //create a new project and do something
                        //addProjects.add()
                        //matchString.put(project.id, <empty list>)
                        
                        /*
                         * Options: 
                            - Ekotrope ID is not in salesforce:
							- Add the project to an add list
                                - SF: 
                                    - Create project, give it a status that designates it as a projec that needs 
											to be matched. The wrapper class that visualize match oppportunities
											does the matching. 
									- Try to find it based on match algorithm:
                                    - If we can find it then suggest match
                                    - If we can't find it: then create new project  
                                - MF: 
                                    - Create the project
                                    - might consider only grabbing Registered with Resnet projects
                                    - attempt to group
						*/                  
                    }             
                } // not all callouts were successfull
                else{
                    system.debug('Not all http callouts were successfull. Project == 200, others ?');
                    if(planResponse.getStatusCode() != 200){
                        system.debug('planResponse code:');
                        system.debug(planResponse.getStatusCode());
                        Log__c errorLog = ekotropeSync.constructErrorLog('getHousePlan','getHousePlan', planResponse, projectId, planResponse.getBody());
                        errorLogs.add(errorLog);
                    } 
                    if(analysisResponse.getStatusCode() != 200){
                        system.debug('analysisResponse code:');
                        system.debug(analysisResponse.getStatusCode());
                        Log__c errorLog = EkotropeSync.constructErrorLog('getHousePlanAnalysis - EkotropeAsModeled','getHousePlanAnalysis', analysisResponse, projectId, analysisResponse.getBody());
                        errorLogs.add(errorLog);
                        
                    } 
                    if(ReferenceAnalysisResponse.getStatusCode() != 200){
                        system.debug('ReferenceAnalysisResponse code:');
                        system.debug(ReferenceAnalysisResponse.getStatusCode());
                        Log__c errorLog = EkotropeSync.constructErrorLog('getHousePlanAnalysis - HERSReference','getHousePlanAnalysis', ReferenceAnalysisResponse, projectId, ReferenceAnalysisResponse.getBody());
                        errorLogs.add(errorLog);
                    } 
                    if(DesignanalysisResponse.getStatusCode() != 200){
                        system.debug('DesignanalysisResponse code:');
                        system.debug(DesignanalysisResponse.getStatusCode());
                        Log__c errorLog = EkotropeSync.constructErrorLog('getHousePlanAnalysis - HERSRated','getHousePlanAnalysis', DesignanalysisResponse, projectId, DesignanalysisResponse.getBody());
                        errorLogs.add(errorLog);
                    }
                } 
            } // projectResponse was not statusCode == 200
            else{
                Log__c errorLog = EkotropeSync.constructErrorLog('getProject','getProject', projectResponse, projectId, projectResponse.getBody());
                errorLogs.add(errorLog);
                system.debug(projectId);
                system.debug(projectResponse.getBody());
            }         
        }
        
        
        
    }
    
    
    
    global void finish(Database.BatchableContext bc){}
    
    /*   
    global void execute(Database.BatchableContext bc, List<String> projectsToUpdate){   
        //check to see if any should not be auto-processed
        for(String projectId:projectsToUpdate){
            system.debug('ekotropeSync.execute - Iterating through all projects that need updating in this batch');
            system.debug(Limits.getCpuTime());
            if(globalProjectUpdateStatusMap.get(projectId)[1] == null){ekotropeStatus = 'SUBMITTED_FOR_QA';}
            else{ekotropeStatus = globalProjectUpdateStatusMap.get(projectId)[1];}
            
            if(globalProjectUpdateStatusMap.get(projectId)[0] == null){updateStatus = 'update status';}
            else{updateStatus = globalProjectUpdateStatusMap.get(projectId)[0];}
        
            //if this is a test method we need to set the appropriate mock class
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpProjectCalloutMockImplJG() ); }
            
            system.debug('geting project information from ekotrope: '+Limits.getCpuTime());
            HttpResponse projectResponse = ekotropeSync.getProject(authorization, projectId);
            system.debug('Finished getting project information from ekotrope: '+Limits.getCpuTime());
            if(projectResponse.getStatusCode() == 418){
                system.debug('Project has status code 418: '+projectId);
                system.debug(projectResponse.getBody());
                Log__c errorLog = constructErrorLog('getProject','getProject', projectResponse, projectId, projectResponse.getBody());
                
                errorLogs.add(errorLog);
            }
            else if(projectResponse.getStatusCode() == 200){
                String newProject = String.valueOf(projectResponse.getBody());
                projectJSON2Apex.aProjectJSON2Apex qProject = projectJSON2Apex.parse(newProject);

                //if(qProject.hersRatingDetails.rater.resnetProviderId == '1998-057'){/// CHANGE this to if > last sync date
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpHouseCalloutMocklJG() ); }
                HttpResponse planResponse = ekotropeSync.getHousePlan(authorization, qProject.masterPlanId);               
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
                HttpResponse analysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'EkotropeAsModeled', codesToCheck);
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
                HttpResponse ReferenceAnalysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSReference', codesToCheck);
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
                HttpResponse DesignanalysisResponse = ekotropeSync.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSRated', codesToCheck);

                //Complete the response parsing and record creation only if all HTTP callouts were successful
                if(planResponse.getStatusCode() == 200 && analysisResponse.getStatusCode() == 200 && ReferenceAnalysisResponse.getStatusCode() == 200 && DesignanalysisResponse.getStatusCode() == 200){
                    String plan = String.valueOf(planResponse.getBody());
                    planJson2Apex.aPlanJson2Apex qplan = planJson2Apex.parse(plan);
                    String AsIsAnalysis = String.valueOf(analysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex AsIsAnalysisResults = analysisJson2Apex.parse(AsIsAnalysis);                
                    String ReferenceAnalysis = String.valueOf(ReferenceAnalysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex ReferencenalysisResults = analysisJson2Apex.parse(ReferenceAnalysis);
                    String DesignAnalysis = String.valueOf(DesignanalysisResponse.getBody());
                    analysisJson2Apex.pAnalysisJson2Apex DesignAnalysisResults = analysisJson2Apex.parse(DesignAnalysis);
                    system.debug(Limits.getCpuTime());


                    Project__c existingProjectPlaceHolder = new Project__c(
                    Ekotrope_ID__c = qProject.id
                    );

                
                    project_status = ekotropeSync.setProjectStatus(qProject, qplan, globalProjectUpdateStatusMap.get(projectId)[0], globalProjectUpdateStatusMap.get(projectId)[1]);
                    String HERS_Rater =  raterMap.get(String.valueOf(qProject.hersRatingDetails.rater.resnetRaterId));
                    if(HERS_Rater == null){
                        HERS_Rater = raterMap.get(String.valueOf('1309482'));
                    }
                    if (qProject.hersRatingDetails.associatedUsers.size() > 0){
                        //Check to see if the RFI, Rater entries are correct
                        //If entry is incorrect (rater,rfi selected incorrect credential type) an Auto QA Record is generated to log that error. 
                        //The inspection record is assigned to the place holder project for upsert. 
                        //If no error, this returns the correct rater/rfi ids. 
                        if (qProject.hersRatingDetails.associatedUsers[0].userType == 'Rater'){
                            if(qProject.hersRatingDetails.associatedUsers[0].resnetRaterId == ''){
                                project_status = 'Error';
                                Inspections__c inspectionRecord = ekotropeSync.constructAutoQaRecord(qProject);
                                inspectionRecord.Project__r = existingProjectPlaceHolder;
                                inspectionRecord.mismatched_RTIN__c = TRUE;
                                autoQaRecordList.add(inspectionRecord);
                            } else{
                                raterId = qProject.hersRatingDetails.associatedUsers[0].resnetRaterId;
                                }
                        } else if (qProject.hersRatingDetails.associatedUsers[0].userType == 'FieldInspector'){
                            if(qProject.hersRatingDetails.associatedUsers[0].fieldInspectorId == ''){
                                project_status = 'Error';
                                Inspections__c inspectionRecord = ekotropeSync.constructAutoQaRecord(qProject);
                                inspectionRecord.Project__r = existingProjectPlaceHolder;
                                inspectionRecord.mismatched_RTIN__c = TRUE;
                                autoQaRecordList.add(inspectionRecord);
                            } else{raterId = qProject.hersRatingDetails.associatedUsers[0].fieldInspectorId;}
                        }
                        RFI_Rater = raterMap.get(raterId);
                        } else{RFI_Rater = raterMap.get(String.valueOf(qProject.hersRatingDetails.rater.resnetRaterId));}
                    if(RFI_Rater == null){RFI_Rater = raterMap.get(String.valueOf('1309482'));}
                    
                    String ratingOrganization = accountsMap.get(String.valueof(qProject.hersRatingDetails.rater.ratingCompany.id));
                    Project__c projectRecord = ekotropeSync.constructProject(qProject, AsIsAnalysisResults, HERS_Rater, RFI_Rater, ratingOrganization, project_status, globalProjectUpdateStatusMap.get(projectId)[0]);
                    SERH_Data__c SerhRecord = ekotropeSync.constructDataRecord(qProject, qplan, AsIsAnalysisResults, ReferencenalysisResults, DesignAnalysisResults, dataPrefix);
                    SerhRecord.Project__r = existingProjectPlaceHolder;
                    serhDataList.add(serhRecord);                 
                    ekotropeIdList.add(projectRecord);
                    //If the projectRecord has status of 'In Progress' we need to add it to the list of 
                    //files we want to push through the auto qa select process.

                    if(projectRecord.Project_Status__c == 'In Progress'){autoQalist.add(projectRecord.Ekotrope_ID__c);} 
                }
                else{
                    system.debug('Project response was not 418 and not 200');
                    if(planResponse.getStatusCode() != 200){
                        Log__c errorLog = constructErrorLog('getHousePlan','getHousePlan', planResponse, projectId, planResponse.getBody());
                
                        errorLogs.add(errorLog);
                    } 
                    if(analysisResponse.getStatusCode() != 200){
                        Log__c errorLog = constructErrorLog('getHousePlanAnalysis - EkotropeAsModeled','getHousePlanAnalysis', analysisResponse, projectId, analysisResponse.getBody());
                   
                        errorLogs.add(errorLog);
                        
                    } 
                    if(ReferenceAnalysisResponse.getStatusCode() != 200){
                        Log__c errorLog = constructErrorLog('getHousePlanAnalysis - HERSReference','getHousePlanAnalysis', ReferenceAnalysisResponse, projectId, ReferenceAnalysisResponse.getBody());
    
                       
                        errorLogs.add(errorLog);
                    } 
                    if(DesignanalysisResponse.getStatusCode() != 200){
                        Log__c errorLog = constructErrorLog('getHousePlanAnalysis - HERSRated','getHousePlanAnalysis', DesignanalysisResponse, projectId, DesignanalysisResponse.getBody());
            
                        errorLogs.add(errorLog);
                    }
                } 
            }
            else{
                Log__c errorLog = constructErrorLog('getProject','getProject', projectResponse, projectId, projectResponse.getBody());

            
                errorLogs.add(errorLog);
                system.debug(projectId);
                system.debug(projectResponse.getBody());
            }     
        }
        

        //Upsert projects, serhData, autoQaInspections to salesforce
        upsert ekotropeIdList Ekotrope_ID__c;
        upsert serhDataList SERH_Data__c.Fields.Ekotrope_Plan_ID__c;
        upsert autoQaRecordList;
        insert errorLogs;
        ekotropeSync.determineQaNeed(autoQaList);

        serhDataList.clear();
        ekotropeIdList.clear();
        autoQaRecordList.clear();
        
        
        system.debug('ekotropeSync.execute Finish');
        system.debug(Limits.getCpuTime());
        system.debug('CPU Time Limits');
        system.debug(Limits.getLimitCpuTime());
    }

    global void finish(Database.BatchableContext bc){
        List<String> filesNotSynced = new List<String>();
        List<Log__c> errorLogs = new List<Log__c>();
        system.debug('finish method starting');
        
        for(Project__c existingProject : [Select Ekotrope_ID__c, Ekotrope_selfOrPlanLastSavedAt__c
                                              FROM Project__c
                                             WHERE Ekotrope_ID__c != null and RecordTypeId='0120B000000t8JVQAY'])
            {existingViridiantProjectsMap.put(existingProject.Ekotrope_ID__c, existingProject.Ekotrope_selfOrPlanLastSavedAt__c);}
            //Get list of projects from ekotrope that have stage (submitted_for_QA, Registered_with_RESNET, etc)
            //Then passes those projects to be parsed
            for(string ekoStage : ekotropeStages){
                system.debug('Getting all ekotrope projects with stage: ' +ekoStage);
                if(test.isRunningTest()){Test.setMock(HttpCalloutMock.class, new YourHttpUpdaterProj());}
                system.debug('ekotropeSync.getprojectList Start: '+ Limits.getCpuTime());
               
                HttpResponse projectListResponse = SERH.getProjectList(authorization, ekoStage);
				system.debug('ekotropeSync.getprojectList Finish: '+ Limits.getCpuTime());
                
                
                //Error with the getprojectList method so except out of this start method
                // and pass an empty iterable
                system.debug('getProjectList had status: '+ projectListResponse.getStatusCode());
                if(projectListResponse.getStatusCode() == 200){
                    String newProjectList = String.valueOf(projectListResponse.getBody());    
                    if(projectListResponse.getBody() != ''){
                        system.debug('getProjectList returned full body');
                        newResults = (List<Object>)JSON.deserializeUntyped(newProjectList);                    
                        for(Object project : newResults){
                            Map<String,Object> data = (Map<String,Object>)project;
                            List <String> subList = new List<String>();
                            //Checks to see if the projects from ekotrope exist in salesforce
                            //If it doesn't(=null) add the id to projectIdList
                            //If it does, check to see if it ekotrope model has been changed recently.
                            //If so add the id to the projectIdList
                            if (existingViridiantProjectsMap.get(String.valueOf(data.get('id'))) == null) {
                                projectIdList.add(String.valueOf(data.get('id')));
                                filesNotSynced.add(String.valueOf(data.get('id')));
                            } else  {
                                if(data.get('selfOrPlanLastSavedAt') != existingViridiantProjectsMap.get(String.valueOf(data.get('id')))){
                                    projectIdList.add(String.valueOf(data.get('id')));
                                    filesNotSynced.add(String.valueOf(data.get('id')));
                                }   
                            }
                        }
                    }else{
                        system.debug('getProjectList returned blank body');
                        Log__c errorLog = constructErrorLog('getProjectList','getProjectList', projectListResponse, ekoStage, 'getProjectList returned blank body');
                        errorLogs.add(errorLog);
                           
                    }  
                }else{
                    Log__c errorLog = constructErrorLog('getProjectList','getProjectList', projectListResponse, ekoStage, projectListResponse.getBody());
                    errorLogs.add(errorLog);   
                }                           
			}
        
      	    
        Integer numberFilesNotSynced = filesNotSynced.size();     
        System.debug(numberFilesNotSynced);
        if(numberFilesNotSynced == 0){
            //create sObject that states the database is synced
            HttpResponse response = new HttpResponse();
            response.setStatus('successful sync');
            response.setStatusCode(200);
            response.setBody('Ekotrope and Salesforce synced');
            Log__c errorLog = constructErrorLog('successful sync','SERH', response, '', 'Database Successfully Synced');
            errorLogs.add(errorLog);
        }else{
            system.debug(numberFilesNotSynced);
            HttpResponse response = new HttpResponse();
            response.setStatus('Unsuccessful sync');
            response.setStatusCode(409);
            response.setBody('{}');
            Log__c errorLog = constructErrorLog('Unsuccessful sync','SERH', response, '', string.valueof(filesNotSynced));
            errorLogs.add(errorLog);
        }
        
        insert errorLogs;

        if (Test.isRunningTest()){
            existingViridiantProjectsMap.clear();
        } else{
            SERH_uploadToBuildingRegistry uploadProjects = new SERH_uploadToBuildingRegistry();
        	uploadProjects.setAuthorization(authorization);
        	Id uploadProjectBatchId = Database.executeBatch(uploadProjects, 2);
        }
        existingViridiantProjectsMap.clear();
    }
*/

}